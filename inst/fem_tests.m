## Copyright (C) 2011(-2020) Reinhard <octave-user@a1.net>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; If not, see <http://www.gnu.org/licenses/>.

## -*- texinfo -*-
## mboct-fem-pkg is a small and lightweight finite element toolkit for GNU-Octave.
## It can be used as a pre- and post-processor for MBDyn's modal elements (www.mbdyn.org).
## Simple meshes can be generated by means of the built in hexahedral mesh generator.
## More complex tetrahedral and hexahedral meshes can be imported from Gmsh, EOSSP and APDL.
## Post-processing is possible either within GNU-Octave or with Gmsh as post-processor.

%!function do_plot = fem_tests_enable_plotting()
%!  ## Use this global function to turn on plotting
%!  ## for all tests if a test fails.
%!  do_plot = false;

%!test
%! ## TEST 1
%! close all;
%! scale_stat = 1;
%! scale_eig = 250e-3;

%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;
%! Fy = 15000;
%! h = 10e-3 / 2;
%! geometry.l = 1000e-3;
%! geometry.w = 10e-3;
%! geometry.h = 50e-3;
%! A = geometry.w * geometry.h;
%! Wz = geometry.h * geometry.w^2 / 6;
%! Iz = geometry.h * geometry.w^3 / 12;
%! tauxx_max = -Fy * geometry.l / Wz;
%! tauxy_mean = Fy / A;
%! Uy = Fy * geometry.l^3 / (3 * material.E * Iz);
%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! number_of_modes = 10;
%! number_of_modes_disp = 3;
%! if (exist("fem_tests_enable_plotting"))
%!   plot_def = fem_tests_enable_plotting();
%! else
%!   plot_def = false;
%! endif
%! f = [ 0; Fy; 0 ];
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, f);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.M, ...
%!  mat_ass.K, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_MASS, ...
%!                               FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%!
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%!
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! alg = {"shift-invert", "symmetric-inverse", "unsymmetric"};
%! rho = 100;
%! tol = 1e-6;
%! err = zeros(number_of_modes, numel(alg));
%! empty_cell = cell(1, numel(alg));
%! sol_eig = struct("def", empty_cell, "f", empty_cell, "lambda", empty_cell);
%! for a=1:numel(alg)
%!   [sol_eig(a), err(:, a)] = fem_sol_modal(mesh, dof_map, mat_ass, number_of_modes, rho, tol, alg{a});
%! endfor

%! z = linspace(0,geometry.l,100);

%! I = [ geometry.w * geometry.h, geometry.h * geometry.w^3 / 12, geometry.w * geometry.h^3 / 12 ];

%! y(1,:) = f(1) * geometry.l / ( material.E * I(1) ) * ( 1 - z / geometry.l );

%! for i=2:3
%!   y(i,:) = f(i) * geometry.l^3 / ( 6 * material.E * I(i) ) * ( 2 - 3 * z / geometry.l + ( z / geometry.l ).^3 );
%! endfor

%! B = material.E * I(2:3);
%! my = material.rho * I(1);
%! P0 = ( 0.3 * geometry.l ) / geometry.l^3 * 3 * B;
%! omega1 = sqrt(B / (my * geometry.l^4));
%! omega_ref = omega1.' * [3.516, 22.035, 61.697];
%! omega_ref = sort(reshape(omega_ref, 1, numel(omega_ref)));
%! f_ref = omega_ref / (2 * pi);

%! for a=1:numel(sol_eig)
%!   assert(sol_eig(a).f(1:5), f_ref(1:5), 4e-2 * max(f_ref(1:5)));
%! endfor

%! if (plot_def)
%!   figure("visible","off");
%!   hold on;
%!   fem_post_sol_plot(mesh);
%!   view(30,30);
%!   xlabel('x [m]');
%!   ylabel('y [m]');
%!   zlabel('z [m]');
%!   grid on;
%!   grid minor on;
%!   title('undeformed mesh');

%!   figure("visible","off");
%!   hold on;
%!   fem_post_sol_plot(mesh, sol_stat, scale_stat);
%!   view(30,30);
%!   xlabel('x [m]');
%!   ylabel('y [m]');
%!   zlabel('z [m]');
%!   grid on;
%!   grid minor on;
%!   title('deformed mesh');

%!   for i=1:min(number_of_modes_disp,length(sol_eig(1).f))
%!     figure("visible", "off");
%!     hold on;
%!     fem_post_sol_plot(mesh, sol_eig(1), scale_eig / max(norm(sol_eig(1).def(:, :, i), "rows")),i);
%!     view(30,30);
%!     xlabel('x [m]');
%!     ylabel('y [m]');
%!     zlabel('z [m]');
%!     grid on;
%!     grid minor on;
%!     title(sprintf("%d. eigenmode: %gHz",i,sol_eig(1).f(i)));
%!   endfor
%!   figure_list();
%! endif

%!test
%! ## TEST 2
%! close all;
%! for iorient=1:10
%!   a = 70e-3;
%!   b = 20e-3;
%!   c = 10e-3;
%!   d = 140e-3;
%!   rho = 7850;
%!   m = rho * a * b * c;
%!   xgc = 0.5 * [a; b; c];
%!   Jxx = m * (b^2 + c^2) / 12;
%!   Jyy = m * (a^2 + c^2) / 12;
%!   Jzz = m * (a^2 + b^2) / 12;
%!   scale_def = 100e-3;
%!   tol = eps^0.8;
%!   Jgc = diag([Jxx, Jyy, Jzz]);
%!   J = Jgc - m * skew(xgc) * skew(xgc);
%!   R = euler123_to_rotation_matrix((2 * rand(3, 1) - 1) * pi);
%!   X = [ 0.5 * a,  0.5 * b,  0.5 * c;
%!         0,  0.5 * b,  0.5 * c;
%!         0, -0.5 * b,  0.5 * c;
%!         0.5 * a, -0.5 * b,  0.5 * c;
%!         0.5 * a,  0.5 * b, -0.5 * c;
%!         0,  0.5 * b, -0.5 * c;
%!         0, -0.5 * b, -0.5 * c;
%!         0.5 * a, -0.5 * b, -0.5 * c,
%!         a,  0.5 * b,  0.5 * c;
%!         a, -0.5 * b,  0.5 * c;
%!         a,  0.5 * b, -0.5 * c;
%!         a, -0.5 * b, -0.5 * c,
%!         d,        0,        0;
%!         -d,        0,        0];
%!   X(:, 2) += 0.5 * b;
%!   X(:, 3) += 0.5 * c;
%!   X = X * R.';
%!   xgc = R * xgc;
%!   J = R * J * R.';
%!   mesh.nodes = [X, zeros(rows(X), 3)];
%!   mesh.elements.iso8 = int32([1:8;
%!                               9, 1, 4, 10, 11, 5, 8, 12]);
%!   mesh.materials.iso8 = int32([1; 1]);
%!   mesh.elements.rbe3(1).nodes = int32([13, 9, 10, 11, 12]);
%!   mesh.elements.rbe3(1).weight = ones(1, 4);
%!   mesh.elements.rbe3(2).nodes = int32([14, 2, 3, 6, 7]);
%!   mesh.elements.rbe3(2).weight = ones(1, 4);
%!   E = 210000e6;
%!   nu = 0.3;
%!   mesh.material_data.rho = rho;
%!   mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   load_case.locked_dof = false(rows(mesh.nodes), 6);

%!   load_case.loaded_nodes = int32([13; 14]);
%!   load_case.loads = [0, 0, -0.25, 0,   0, 0;
%!                      0, 0, -0.25, 0,   0, 0];
%!   dof_map = fem_ass_dof_map(mesh, load_case);
%!   [mat_ass.K, ...
%!    mat_ass.M, ...
%!    mat_ass.Mlumped, ...
%!    mat_ass.R, ...
%!    mat_ass.dm, ...
%!    mat_ass.S, ...
%!    mat_ass.J, ...
%!    mat_ass.C1, ...
%!    mat_ass.mat_info, ...
%!    mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                        dof_map, ...
%!                                        [FEM_MAT_STIFFNESS, ...
%!                                         FEM_MAT_MASS, ...
%!                                         FEM_MAT_MASS_LUMPED, ...
%!                                         FEM_VEC_LOAD_CONSISTENT, ...
%!                                         FEM_SCA_TOT_MASS, ...
%!                                         FEM_VEC_INERTIA_M1, ...
%!                                         FEM_MAT_INERTIA_J, ...
%!                                         FEM_MAT_ACCEL_LOAD], ...
%!                                        load_case);
%!   mat_ass.D = diag(zeros(columns(mat_ass.M), 1));
%!   assert(mat_ass.dm, mesh.material_data.rho * a * b * c, sqrt(eps) * mesh.material_data.rho * a * b * c);
%!   assert(mat_ass.S, xgc * m, m * sqrt(eps))
%!   assert(mat_ass.J, J, sqrt(eps) * norm(J));
%!   slave_dofs = [];
%!   for i=1:numel(mesh.elements.rbe3)
%!     slave_ndofs = dof_map.ndof(mesh.elements.rbe3(i).nodes(2:end), :);
%!     slave_dofs = [slave_dofs, reshape(slave_ndofs, 1, numel(slave_ndofs)), dof_map.edof.rbe3(i, :)];
%!   endfor
%!   slave_dofs = slave_dofs(find(slave_dofs > 0));
%!   master_dofs = int32(1:dof_map.totdof);
%!   master_dofs(slave_dofs) = 0;
%!   master_dofs = master_dofs(find(master_dofs > 0));
%!   assert(full(sum(diag(mat_ass.Mlumped))) / 3, mat_ass.dm, tol * mat_ass.dm);
%!   assert(full(sum(mat_ass.C1, 1)), repmat(m, 1, 3), tol * m);
%! endfor

%!test
%! ## TEST 3
%! ##########################################################################################
%! ## Test case for elimination of Lagrange multipliers
%! ##########################################################################################
%! close all;
%! plot_def = fem_tests_enable_plotting();
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! d = 140e-3;
%! scale_def = 100e-3;
%! tol = eps^0.7;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       0,  0.5 * b,  0.5 * c;  #  2
%!       0, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       0,  0.5 * b, -0.5 * c;  #  6
%!       0, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c,  #  8
%!       a,  0.5 * b,  0.5 * c;  #  9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c,  # 12
%!       d,        0,        0]; # 13

%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9, 1, 4, 10, 11, 5, 8, 12]);
%! mesh.materials.iso8 = int32([1; 1]);
%! mesh.elements.rbe3.nodes = int32([13, 9, 10, 11, 12]);
%! mesh.elements.rbe3.weight = ones(1, 4);
%! n1 = [0.5; 0.5; 0];
%! n1 /= norm(n1);
%! n2 = [1; 1; 1];
%! n3 = cross(n1, n2);
%! n2 = cross(n1, n3);
%! n2 /= norm(n2);
%! n3 /= norm(n3);
%! mesh.elements.joints(1).nodes = int32([13]);
%! mesh.elements.joints(1).C = [[1, 0, 0;
%!                               0, 0, 1],    zeros(2, 3);
%!                              zeros(2, 3), [n2.'; n3.']];
%! load_case.joints(1).U = [0; 0; 0; 0];
%! for i=[2, 3, 6, 7]
%!   mesh.elements.joints(end + 1).nodes = int32(i);
%!   mesh.elements.joints(end).C = [eye(3), zeros(3, 3)];
%!   load_case.joints(end + 1).U = [0; 0; 0];
%! endfor
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = 7850;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! load_case.loaded_nodes = int32([1; 4; 5; 8]);
%! load_case.loads = repmat([0, 0, 10,  0,   0, 0], 4, 1);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M, ...
%!  mat_ass.R, ...
%!  mat_ass.dm, ...
%!  mat_ass.mat_info] = fem_ass_matrix(mesh, ...
%!                                     dof_map, ...
%!                                     [FEM_MAT_STIFFNESS, ...
%!                                      FEM_MAT_MASS, ...
%!                                      FEM_VEC_LOAD_CONSISTENT, ...
%!                                      FEM_SCA_TOT_MASS], ...
%!                                     load_case);
%! assert(rank(mat_ass.K), columns(mat_ass.K));
%! [Tred, Kred, Mred, Rred] = fem_cms_constr_elim(mesh, dof_map, mat_ass);
%! assert(isdefinite(Kred), true);
%! assert(isdefinite(Mred), true);
%! lambda = eig(mat_ass.K, mat_ass.M);
%! lambda = sort(lambda(find(isfinite(lambda))));
%! lambdared = eig(Kred, Mred);
%! lambdared = sort(lambdared);
%! U = full(mat_ass.K \ mat_ass.R);
%! Ured = Tred * (Kred \ Rred);
%! assert(Ured, U(dof_map.idx_node), tol * norm(U(dof_map.idx_node)));
%! assert(lambda(1:length(lambdared)), lambdared, tol * max(abs(lambda(1:length(lambdared)))));
%! sol_stat.def = fem_post_def_nodal(mesh, dof_map, full(mat_ass.K \ mat_ass.R));
%! assert(mat_ass.dm, mesh.material_data.rho * a * b * c, sqrt(eps) * mesh.material_data.rho * a * b * c);
%! if (plot_def)
%!   figure("visible", "off");
%!   fem_post_sol_plot(mesh, sol_stat, scale_def / max(norm(sol_stat.def(:, 1:3), "cols")));
%!   xlabel("x [m]");
%!   ylabel("y [m]");
%!   zlabel("z [m]");
%!   title("deformed mesh");
%!   figure_list();
%! endif

%!test
%! ##########################################################################################
%! ## TEST 4: Test case for elimination of Lagrange multipliers
%! ##########################################################################################
%! close all;
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! d = 140e-3;
%! scale_def = 20e3;
%! tol = eps^0.7;
%! tol2 = eps^0.6;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       0,  0.5 * b,  0.5 * c;  #  2
%!       0, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       0,  0.5 * b, -0.5 * c;  #  6
%!       0, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c,  #  8
%!       a,  0.5 * b,  0.5 * c;  #  9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c,  # 12
%!       d,        0,        0]; # 13

%! Phi1 = [0, 20, 45] * pi / 180;
%! Phi2 = [0, 60, 270] * pi / 180;
%! Phi3 = [0, -15, 30] * pi / 180;
%! for j=1:length(Phi1)
%!   R1 = euler123_to_rotation_matrix([Phi1(j); Phi2(j); Phi3(j)]);
%!   assert(R1.' * R1, eye(3), tol);
%!   assert(R1 * R1.', eye(3), tol);
%!   data(j).T1 = [R1, zeros(3, 3);
%!                 zeros(3, 3), R1];
%!   data(j).mesh.nodes = [X * R1.', zeros(rows(X), 3)];
%!   data(j).mesh.elements.iso8 = int32([1:8;
%!                                       9, 1, 4, 10, 11, 5, 8, 12]);
%!   data(j).mesh.materials.iso8 = int32([1; 1]);
%!   data(j).mesh.elements.rbe3.nodes = int32([13, 9, 10, 11, 12]);
%!   data(j).mesh.elements.rbe3.weight = ones(1, 4);
%!   n1 = [0; 0.5; 0.2];
%!   n1 /= norm(n1);
%!   n2 = [1; 1; 1];
%!   n3 = cross(n1, n2);
%!   n2 = cross(n1, n3);
%!   n2 /= norm(n2);
%!   n3 /= norm(n3);
%!   t1 = [1; 0; 0];
%!   t2 = [0; 0; 1];
%!   data(j).mesh.elements.joints(1).nodes = int32([13]);
%!   data(j).mesh.elements.joints(1).C = [[(R1 * t1).'; (R1 * t2).'],    zeros(2, 3);
%!                                        zeros(2, 3), [(R1 * n2).'; (R1 * n3).']];
%!   for i=[2, 3, 6, 7]
%!     data(j).mesh.elements.joints(end + 1).nodes = int32(i);
%!     data(j).mesh.elements.joints(end).C = [R1.', zeros(3, 3)];
%!   endfor
%!   E = 210000e6;
%!   nu = 0.3;
%!   data(j).mesh.material_data.rho = 7850;
%!   data(j).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   data(j).load_case.locked_dof = false(rows(data(j).mesh.nodes), 6);
%!   data(j).load_case.loaded_nodes = int32([1; 4; 5; 8]);
%!   data(j).load_case.loads = repmat([0, 0, 10,  0,   0, 0] * data(j).T1.', 4, 1);
%!   data(j).dof_map = fem_ass_dof_map(data(j).mesh, data(j).load_case);
%!   [data(j).mat_ass.K, ...
%!    data(j).mat_ass.M, ...
%!    data(j).mat_ass.R, ...
%!    data(j).mat_ass.dm, ...
%!    data(j).mat_ass.mat_info] = fem_ass_matrix(data(j).mesh, ...
%!                                               data(j).dof_map, ...
%!                                               [FEM_MAT_STIFFNESS, ...
%!                                                FEM_MAT_MASS, ...
%!                                                FEM_VEC_LOAD_CONSISTENT, ...
%!                                                FEM_SCA_TOT_MASS], ...
%!                                               data(j).load_case);
%!   assert(data(j).mat_ass.dm, data(j).mesh.material_data.rho * a * b * c, sqrt(eps) * data(j).mesh.material_data.rho * a * b * c);
%!   assert(rank(data(j).mat_ass.K), columns(data(j).mat_ass.K));
%!   [data(j).Tred, data(j).Kred, data(j).Mred, data(j).Rred] = fem_cms_constr_elim(data(j).mesh, data(j).dof_map, data(j).mat_ass);
%!   assert(isdefinite(data(j).Kred), true);
%!   assert(isdefinite(data(j).Mred), true);
%!   [data(j).Phi, data(j).lambda] = eig(data(j).mat_ass.K, data(j).mat_ass.M);
%!   data(j).lambda = diag(data(j).lambda);
%!   idx_lambda = find(isfinite(data(j).lambda));
%!   data(j).Phi = data(j).Phi(:, idx_lambda);
%!   [data(j).lambda, idx_lambda] = sort(data(j).lambda(idx_lambda));
%!   data(j).Phi = data(j).Phi(:, idx_lambda);
%!   for k=1:columns(data(j).Phi)
%!     data(j).Phi(:, k) /= norm(data(j).Phi(data(j).dof_map.idx_node, k));
%!   endfor
%!   [data(j).Phired, data(j).lambdared] = eig(data(j).Kred, data(j).Mred);
%!   data(j).lambdared = diag(data(j).lambdared);
%!   data(j).lambdared = sort(data(j).lambdared);
%!   data(j).U = full(data(j).mat_ass.K \ data(j).mat_ass.R);
%!   data(j).Ured = data(j).Tred * (data(j).Kred \ data(j).Rred);
%!   assert(data(j).Ured, data(j).U(data(j).dof_map.idx_node), tol * norm(data(j).U(data(j).dof_map.idx_node)));
%!   assert(data(j).lambda(1:length(data(j).lambdared)), data(j).lambdared, tol * max(abs(data(j).lambda(1:length(data(j).lambdared)))));
%!   data(j).sol_stat.def = fem_post_def_nodal(data(j).mesh, data(j).dof_map, full(data(j).mat_ass.K \ data(j).mat_ass.R)) * data(j).T1;
%!   for k=1:columns(data(j).Phi)
%!     data(j).modal(k).f = sqrt(data(j).lambda(k)) / (2 * pi);
%!     data(j).modal(k).def = fem_post_def_nodal(data(j).mesh, data(j).dof_map, data(j).Phi(:, k)) * data(j).T1;
%!   endfor
%! endfor
%! for j=2:length(Phi1)
%!   assert(data(j).sol_stat.def, data(1).sol_stat.def, tol * max(max(max(abs(data(1).sol_stat.def)))));
%!   N = min([length(data(1).lambda), length(data(j).lambda)]);
%!   assert(data(j).lambda(1:N), data(1).lambda(1:N), tol * max(abs(data(1).lambda(1:N))));
%!   assert(data(j).lambdared, data(1).lambdared, tol * max(abs(data(1).lambdared)));
%!   for k=1:N
%!     assert(max(max(max(abs(data(j).modal(k).def - data(1).modal(k).def)))) < tol2 * max(max(max(abs(data(1).modal(k).def)))) || max(max(max(abs(data(j).modal(k).def + data(1).modal(k).def)))) < tol2 * max(max(max(abs(data(1).modal(k).def)))));
%!   endfor
%! endfor

%!test
%! #############################################################
%! ## TEST 5: Test case for RBE3 element
%! ## model of two brick elements connected to one rbe3 element at 0.5 * l
%! ## which is connected to a second rbe3 element at l
%! #############################################################
%! close all;
%! b_plot = fem_tests_enable_plotting();
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! l = 80e-3;
%! beta = atan(c/b);
%! r = sqrt((c/2)^2 + (b/2)^2);
%! tol = eps^0.5;
%! scale_def = 10e-3;
%! Fx = 40000;
%! Fy = 50;
%! Fz = 1000;
%! Mx = 50;
%! My = 30;
%! Mz = 40;
%! Phi9 = beta + pi / 2;
%! Phi10 = 3/2 * pi - beta;
%! Phi11 = pi / 2 - beta;
%! Phi12 = 3/2 * pi + beta;
%! Ft = Mx / (4 * r);
%! Fx9  = Fx / 4 - (Mz + Fy * l) / (2 * b) + (My - Fz * l) / (2 * c);
%! Fx10 = Fx / 4 + (Mz + Fy * l) / (2 * b) + (My - Fz * l) / (2 * c);
%! Fx11 = Fx / 4 - (Mz + Fy * l) / (2 * b) + (Fz * l - My) / (2 * c);
%! Fx12 = Fx / 4 + (Mz + Fy * l) / (2 * b) + (Fz * l - My) / (2 * c);
%! Fy9 = Fy / 4 + Ft * cos(Phi9);
%! Fy10 = Fy / 4 + Ft * cos(Phi10);
%! Fy11 = Fy / 4 + Ft * cos(Phi11);
%! Fy12 = Fy / 4 + Ft * cos(Phi12);
%! Fz9 = Fz / 4 + Ft * sin(Phi9);
%! Fz10 = Fz / 4 + Ft * sin(Phi10);
%! Fz11 = Fz / 4 + Ft * sin(Phi11);
%! Fz12 = Fz / 4 + Ft * sin(Phi12);

%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  # 1
%!       0,  0.5 * b,  0.5 * c;  # 2
%!       0, -0.5 * b,  0.5 * c;  # 3
%!       0.5 * a, -0.5 * b,  0.5 * c;  # 4
%!       0.5 * a,  0.5 * b, -0.5 * c;  # 5
%!       0,  0.5 * b, -0.5 * c;  # 6
%!       0, -0.5 * b, -0.5 * c;  # 7
%!       0.5 * a, -0.5 * b, -0.5 * c,  # 8
%!       a,  0.5 * b,  0.5 * c;  # 9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c,  # 12
%!       a + 0.5 * l,        0,        0;  # 13
%!       a + l,        0,        0]; # 14
%! Phi1 = [0, 30, 60] * pi / 180;
%! Phi2 = [0, 20, 90] * pi / 180;
%! Phi3 = [0, 70, 10] * pi / 180;
%! for j=1:length(Phi1)
%!   Rref = euler123_to_rotation_matrix([Phi1(j); Phi2(j); Phi3(j)]);
%!   Tref = [Rref, zeros(3, 3);
%!           zeros(3, 3), Rref];
%!   if (b_plot)
%!     figure("visible", "off");
%!   endif
%!   for i=1:2
%!     if i==2
%!       idx_node = 1:14;
%!     else
%!       idx_node = 1:12;
%!     endif
%!     data(i, j).mesh.nodes = [X(idx_node, :), zeros(length(idx_node), 3)] * Tref.';
%!     data(i, j).mesh.elements.iso8 = int32([1:8;
%!                                            9, 1, 4, 10, 11, 5, 8, 12]);
%!     data(i, j).mesh.materials.iso8 = int32([1; 1]);
%!     if i==2
%!       data(i, j).mesh.elements.rbe3(1).nodes = int32([13, 9, 10, 11, 12]);
%!       data(i, j).mesh.elements.rbe3(1).weight = ones(1, 4);
%!       data(i, j).mesh.elements.rbe3(2).nodes = int32([14, 13]);
%!       data(i, j).mesh.elements.rbe3(2).weight = ones(1, 1);
%!     endif
%!     E = 210000e6;
%!     nu = 0.3;
%!     data(i, j).mesh.material_data.rho = 7850;
%!     data(i, j).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!     data(i, j).load_case.locked_dof = false(rows(data(i, j).mesh.nodes), 6);
%!     data(i, j).load_case.locked_dof([2, 3, 6, 7], 1:6) = true;
%!     if i==2
%!       data(i, j).load_case.loaded_nodes = int32([14]);
%!       data(i, j).load_case.loads = [Fx, Fy, Fz, Mx, My, Mz] * Tref.';
%!     else
%!       data(i, j).load_case.loaded_nodes = int32([9; 10; 11; 12]);
%!       data(i, j).load_case.loads = [Fx9,  Fy9,  Fz9,  0, 0, 0;
%!                                     Fx10, Fy10, Fz10, 0, 0, 0;
%!                                     Fx11, Fy11, Fz11, 0, 0, 0;
%!                                     Fx12, Fy12, Fz12, 0, 0, 0] * Tref.';
%!     endif
%!     data(i, j).dof_map = fem_ass_dof_map(data(i, j).mesh, data(i, j).load_case);
%!     [data(i, j).mat_ass.K, ...
%!      data(i, j).mat_ass.M, ...
%!      data(i, j).mat_ass.R] = fem_ass_matrix(data(i, j).mesh, ...
%!                                             data(i, j).dof_map, ...
%!                                             [FEM_MAT_STIFFNESS, ...
%!                                              FEM_MAT_MASS, ...
%!                                              FEM_VEC_LOAD_CONSISTENT], ...
%!                                             data(i, j).load_case);
%!     assert(rank(data(i, j).mat_ass.K), columns(data(i, j).mat_ass.K));
%!     data(i, j).U = full(data(i, j).mat_ass.K \ data(i, j).mat_ass.R);
%!     data(i, j).sol_stat.def = fem_post_def_nodal(data(i, j).mesh, data(i, j).dof_map, data(i, j).U);
%!     if (b_plot)
%!       fem_post_sol_plot(data(i, j).mesh);
%!       fem_post_sol_plot(data(i, j).mesh, data(i, j).sol_stat, scale_def / max(norm(data(1,1).sol_stat.def(1:12, 1:3), "rows")));
%!     endif
%!   endfor
%!   assert(data(2, j).sol_stat.def(1:12, :) * Tref, data(1, 1).sol_stat.def, tol * max(norm(data(1,1).sol_stat.def, "rows")));
%!   if (b_plot)
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!   endif
%! endfor

%!test
%! #############################################################
%! ## TEST 6: Test case for RBE3 element
%! ## model of two brick elements connected to one rbe3 element
%! #############################################################
%! close all;
%! b_plot = fem_tests_enable_plotting();
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! l = 80e-3;
%! beta = atan(c/b);
%! r = sqrt((c/2)^2 + (b/2)^2);
%! tol = eps^0.5;
%! scale_def = 10e-3;
%! Fx = 40000;
%! Fy = 50;
%! Fz = 100;
%! Mx = 50;
%! My = 30;
%! Mz = 40;
%! Phi9 = beta + pi / 2;
%! Phi10 = 3/2 * pi - beta;
%! Phi11 = pi / 2 - beta;
%! Phi12 = 3/2 * pi + beta;
%! Ft = Mx / (4 * r);
%! Fx9  = Fx / 4 - (Mz + Fy * l) / (2 * b) + (My - Fz * l) / (2 * c);
%! Fx10 = Fx / 4 + (Mz + Fy * l) / (2 * b) + (My - Fz * l) / (2 * c);
%! Fx11 = Fx / 4 - (Mz + Fy * l) / (2 * b) + (Fz * l - My) / (2 * c);
%! Fx12 = Fx / 4 + (Mz + Fy * l) / (2 * b) + (Fz * l - My) / (2 * c);
%! Fy9 = Fy / 4 + Ft * cos(Phi9);
%! Fy10 = Fy / 4 + Ft * cos(Phi10);
%! Fy11 = Fy / 4 + Ft * cos(Phi11);
%! Fy12 = Fy / 4 + Ft * cos(Phi12);
%! Fz9 = Fz / 4 + Ft * sin(Phi9);
%! Fz10 = Fz / 4 + Ft * sin(Phi10);
%! Fz11 = Fz / 4 + Ft * sin(Phi11);
%! Fz12 = Fz / 4 + Ft * sin(Phi12);

%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  # 1
%!       0,  0.5 * b,  0.5 * c;  # 2
%!       0, -0.5 * b,  0.5 * c;  # 3
%!       0.5 * a, -0.5 * b,  0.5 * c;  # 4
%!       0.5 * a,  0.5 * b, -0.5 * c;  # 5
%!       0,  0.5 * b, -0.5 * c;  # 6
%!       0, -0.5 * b, -0.5 * c;  # 7
%!       0.5 * a, -0.5 * b, -0.5 * c,  # 8
%!       a,  0.5 * b,  0.5 * c;  # 9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c,  # 12
%!       a + l,        0,        0]; # 13
%! Phi1 = [0, 30, 60] * pi / 180;
%! Phi2 = [0, 20, 90] * pi / 180;
%! Phi3 = [0, 70, 10] * pi / 180;
%! for j=1:length(Phi1)
%!   Rref = euler123_to_rotation_matrix([Phi1(j); Phi2(j); Phi3(j)]);
%!   Tref = [Rref, zeros(3, 3);
%!           zeros(3, 3), Rref];
%!   if (b_plot)
%!     figure("visible", "off");
%!   endif
%!   for i=1:2
%!     if (i==2)
%!       idx_node = 1:13;
%!     else
%!       idx_node = 1:12;
%!     endif
%!     data(i, j).mesh.nodes = [X(idx_node, :), zeros(length(idx_node), 3)] * Tref.';
%!     data(i, j).mesh.elements.iso8 = int32([1:8;
%!                                            9, 1, 4, 10, 11, 5, 8, 12]);
%!     data(i, j).mesh.materials.iso8 = int32([1; 1]);
%!     if (i==2)
%!       data(i, j).mesh.elements.rbe3.nodes = int32([13, 9, 10, 11, 12]);
%!       data(i, j).mesh.elements.rbe3.weight = ones(1, 4);
%!     endif
%!     E = 210000e6;
%!     nu = 0.3;
%!     data(i, j).mesh.material_data.rho = 7850;
%!     data(i, j).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!     data(i, j).load_case.locked_dof = false(rows(data(i, j).mesh.nodes), 6);
%!     data(i, j).load_case.locked_dof([2, 3, 6, 7], 1:6) = true;
%!     if i==2
%!       data(i, j).load_case.loaded_nodes = int32([13]);
%!       data(i, j).load_case.loads = [Fx, Fy, Fz, Mx, My, Mz] * Tref.';
%!     else
%!       data(i, j).load_case.loaded_nodes = int32([9; 10; 11; 12]);
%!       data(i, j).load_case.loads = [Fx9,  Fy9,  Fz9,  0, 0, 0;
%!                                     Fx10, Fy10, Fz10, 0, 0, 0;
%!                                     Fx11, Fy11, Fz11, 0, 0, 0;
%!                                     Fx12, Fy12, Fz12, 0, 0, 0] * Tref.';
%!     endif
%!     data(i, j).dof_map = fem_ass_dof_map(data(i, j).mesh, data(i, j).load_case);
%!     [data(i, j).mat_ass.K, ...
%!      data(i, j).mat_ass.R] = fem_ass_matrix(data(i, j).mesh, ...
%!                                             data(i, j).dof_map, ...
%!                                             [FEM_MAT_STIFFNESS, ...
%!                                              FEM_VEC_LOAD_CONSISTENT], ...
%!                                             data(i, j).load_case);
%!     assert(rank(data(i, j).mat_ass.K), columns(data(i, j).mat_ass.K));
%!     data(i, j).U = full(data(i, j).mat_ass.K \ data(i, j).mat_ass.R);
%!     data(i, j).sol_stat.def = fem_post_def_nodal(data(i, j).mesh, data(i, j).dof_map, data(i, j).U);
%!     if (b_plot)
%!       fem_post_sol_plot(data(i, j).mesh);
%!       fem_post_sol_plot(data(i, j).mesh, data(i, j).sol_stat, scale_def / max(norm(data(1,1).sol_stat.def(1:12, 1:3), "rows")));
%!     endif
%!   endfor
%!   assert(data(2, j).sol_stat.def(1:12, :) * Tref, data(1, 1).sol_stat.def, tol * max(norm(data(1,1).sol_stat.def, "rows")));
%!   if (b_plot)
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!   endif
%! endfor
%! return;
%! ndof = data(2,1).dof_map.ndof;
%! edof = data(2,1).dof_map.edof.rbe3;
%! K = full(data(2,1).mat_ass.K);
%! sdof = 1:ndof(12, 3);
%! mdof = ndof(13, :);
%! U1 = data(2,1).U(sdof);
%! K11 = K(sdof, sdof);
%! R1 = K11 * U1;
%! UM = data(2,1).U(mdof);
%! RM = data(2,1).load_case.loads.';
%! B1 = K(sdof, edof(1:6));
%! B2 = K(sdof, edof(7:12));
%! B3 = K(edof(1:6), sdof).';
%! B4 = K(edof(7:12), sdof).';
%! xi = data(2,1).mesh.nodes(data(2,1).mesh.elements.rbe3.nodes, 1:3).';
%! xi = xi(:, 2:end) - xi(:, 1);
%! S = zeros(columns(xi) * 6, 6);
%! for i=1:columns(xi)
%!   S((i - 1) * 6 + (1:6), :) = eye(6);
%!   S((i - 1) * 6 + (1:3), 4:6) = -skew(xi(:, i));
%! endfor
%! Lc = max(norm(xi, "cols"));
%! W = ones(1, columns(xi)*6);
%! W([4:6:end,5:6:end,6:6:end]) = Lc^2;
%! W = diag(W);
%! X = inv(S.' * W * S);
%! B = W * S * X;

%! lambda1 = data(2,1).U(edof(1:6));
%! lambda2 = data(2,1).U(edof(7:12));
%! R = B1 * lambda1 + B2 * lambda2;
%! assert(-lambda1 - lambda2, RM);
%! assert(R, -R1, tol * norm(R1));
%! assert(B3.' * U1, UM, tol * norm(UM));
%! assert(B4.' * U1, UM, tol * norm(UM));
%! assert(B1, B2);
%! assert(B1, B3);
%! assert(B1, B4);

%!test
%! ## TEST 7
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! d = 140e-3;
%! tol = eps^0.8;
%! X = [ a,  0.5 * b,  0.5 * c;
%!       0,  0.5 * b,  0.5 * c;
%!       0, -0.5 * b,  0.5 * c;
%!       a, -0.5 * b,  0.5 * c;
%!       a,  0.5 * b, -0.5 * c;
%!       0,  0.5 * b, -0.5 * c;
%!       0, -0.5 * b, -0.5 * c;
%!       a, -0.5 * b, -0.5 * c,
%!       d,        0,        0];
%! for i=1:2
%!   if i<2
%!     idx_node = 1:8;
%!   else
%!     idx_node = 1:9;
%!   endif
%!   mesh(i).nodes = [X(idx_node, :), zeros(length(idx_node), 3)];
%!   mesh(i).elements.iso8 = int32(1:8);
%!   mesh(i).materials.iso8 = int32(1);
%!   if i>=2
%!     mesh(i).elements.rbe3.nodes = int32([9, 1, 4, 5, 8]);
%!     mesh(i).elements.rbe3.weight = ones(1, 4);
%!   endif
%!   E = 210000e6;
%!   nu = 0.3;
%!   mesh(i).material_data.rho = 1;
%!   mesh(i).material_data.C = fem_pre_mat_isotropic(E, nu);
%!   load_case(i).locked_dof = false(rows(mesh(i).nodes), 6);
%!   load_case(i).locked_dof([2; 3; 6; 7], 1:3) = true;
%!   load_case(i).loaded_nodes = int32([1; 4; 5; 8]);
%!   load_case(i).loads = [0, 0, -0.25, 0,   0, 0;
%!                         0, 0, -0.25, 0,   0, 0;
%!                         0, 0, -0.25, 0,   0, 0;
%!                         0, 0, -0.25, 0,   0, 0];
%!   dof_map{i} = fem_ass_dof_map(mesh(i), load_case(i));
%!   [mat_ass(i).K, ...
%!    mat_ass(i).M, ...
%!    mat_ass(i).dm, ...
%!    mat_ass(i).R] = fem_ass_matrix(mesh(i), ...
%!                                   dof_map{i}, ...
%!                                   [FEM_MAT_STIFFNESS, ...
%!                                    FEM_MAT_MASS, ...
%!                                    FEM_SCA_TOT_MASS, ...
%!                                    FEM_VEC_LOAD_CONSISTENT], ...
%!                                   load_case(i));
%!   sol_stat(i).def = fem_post_def_nodal(mesh(i), dof_map{i}, full(mat_ass(i).K \ mat_ass(i).R));
%!   assert(mat_ass(i).dm, mesh(i).material_data.rho * a * b * c, sqrt(eps) * mesh(i).material_data.rho * a * b * c);
%! endfor
%! assert(sol_stat(2).def(1:8, :), sol_stat(1).def, tol * max(max(abs(sol_stat(1).def))));

%!test
%! ## TEST 8
%! X = [ 1,  1,  1;
%!       -1,  1,  1;
%!       -1, -1,  1;
%!       1, -1,  1;
%!       1,  1, -1;
%!       -1,  1, -1;
%!       -1, -1, -1;
%!       1, -1, -1];
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32(1:8);
%! mesh.materials.iso8 = int32(1);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = 1;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! load_case.locked_dof([2; 3; 6; 7], :) = true;
%! load_case.loaded_nodes = int32([1; 4; 5; 8]);
%! load_case.loads = [0, 0, -0.25;
%!                    0, 0, -0.25;
%!                    0, 0, -0.25;
%!                    0, 0, -0.25];
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [K, M, R, dm] = fem_ass_matrix(mesh, dof_map, [FEM_MAT_STIFFNESS, FEM_MAT_MASS, FEM_VEC_LOAD_CONSISTENT, FEM_SCA_TOT_MASS], load_case);
%! assert(isdefinite(K), true);
%! assert(isdefinite(M), true);
%! assert(dm, mesh.material_data.rho * 8, sqrt(eps) * mesh.material_data.rho * 8);

%!test
%! ## TEST 9
%! X = [1,  1,  1;
%!      -1,  1,  1;
%!      -1, -1,  1;
%!      1, -1,  1;
%!      1,  1, -1;
%!      -1,  1, -1;
%!      -1, -1, -1;
%!      1, -1, -1];
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32(1:8);
%! mesh.materials.iso8 = int32(1);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = 1;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [K, M, dm] = fem_ass_matrix(mesh, dof_map, [FEM_MAT_STIFFNESS, FEM_MAT_MASS, FEM_SCA_TOT_MASS]);
%! assert(isdefinite(K), false);
%! assert(isdefinite(M), true);
%! assert(dm, mesh.material_data.rho * 8, sqrt(eps) * mesh.material_data.rho * 8);

%!test
%! ## TEST 10
%! tol = eps^0.9;
%! N = 10;
%! Phi1 = linspace(0, 90 * pi / 180, N);
%! Phi2 = linspace(0, -30 * pi / 180, N);
%! Phi3 = linspace(0, 20 * pi / 180, N);
%! x0 = [linspace(-1, 1, N);
%!       linspace(0, 3, N);
%!       linspace(-3, 0, N)].';
%! a = 1;
%! b = 5;
%! c = 8;
%! xi = [ a,  b,  c;
%!        -a,  b,  c;
%!        -a, -b,  c;
%!        a, -b,  c;
%!        a,  b, -c;
%!        -a,  b, -c;
%!        -a, -b, -c;
%!        a, -b, -c];
%! lambda = zeros(24, N);
%! for i=1:N
%!   R1 = euler123_to_rotation_matrix([Phi1(i); Phi2(i); Phi3(i)]);
%!   mesh.nodes = [(xi + x0(i, :)) * R1.', zeros(rows(xi), 3)];
%!   V = 8 * a * b * c;
%!   mesh.elements.iso8 = int32(1:8);
%!   mesh.materials.iso8 = int32(1);
%!   E = 210000e6;
%!   nu = 0.3;
%!   mesh.material_data.rho = 1;
%!   mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   load_case.locked_dof = false(rows(mesh.nodes), 6);
%!   load_case.loaded_nodes = int32([3; 3]);
%!   load_case.loads = [0, 0, -0.5;
%!                      0, 0, -0.5];
%!   if i==1
%!     [dof_map] = fem_ass_dof_map(mesh, load_case);
%!   endif
%!   [K, M, dm] = fem_ass_matrix(mesh, dof_map, [FEM_MAT_STIFFNESS, FEM_MAT_MASS, FEM_SCA_TOT_MASS]);
%!   if i == 1
%!     K0 = K;
%!     M0 = M;
%!   else
%!     T = zeros(columns(K), columns(K));
%!     for j=1:rows(mesh.nodes)
%!       T((j - 1) * 3 + (1:3), (j - 1) * 3 + (1:3)) = R1;
%!     endfor
%!     assert(T.' * K * T, K0, tol * norm(K0));
%!     assert(T.' * M * T, M0, tol * norm(M0));
%!   endif
%!   R2 = eye(3) + skew([Phi1(N - i + 1); Phi2(N - i + 1); Phi3(N - i + 1)]);
%!   def = mesh.nodes(:, 1:3) * R2.' - mesh.nodes(:, 1:3) + repmat(x0(N - i + 1, :), rows(xi), 1);
%!   U = zeros(columns(K), 1);
%!   for j=1:3
%!     U(j:3:end) = def(:, j);
%!   endfor
%!   R = full(K * U);
%!   [Phi, lam] = eig(K);
%!   [lam, idx_lambda] = sort(diag(lam));
%!   Phi = Phi(:, idx_lambda);
%!   lambda(:, i) = lam;
%!   assert(max(abs(R)) < tol * norm(K * Phi(:, end)));
%!   assert(0.5 * U.' * K * U < tol * Phi(:, end).' * K * Phi(:, end));
%!   assert(rank(K), columns(K) - 6);
%!   assert(isdefinite(K), false);
%!   assert(isdefinite(M), true);
%!   assert(length(find(lambda(:, i) < tol * max(lambda(:, i)))), 6);
%!   assert(all(lambda(:, i) > -tol * max(lambda(:, i))));
%!   assert(lambda(:, i), lambda(:, 1), tol * max(max(abs(lambda(:, 1)))));
%!   assert(dm, mesh.material_data.rho * V, mesh.material_data.rho * V * tol);
%! endfor


%!test
%! ## TEST 11
%! tol = eps^0.5;
%! N = 10;
%! Phi1 = linspace(0, 90 * pi / 180, N);
%! Phi2 = linspace(0, -30 * pi / 180, N);
%! Phi3 = linspace(0, 20 * pi / 180, N);
%! x0 = [linspace(-1, 1, N);
%!       linspace(0, 3, N);
%!       linspace(-3, 0, N)].';
%! a = -0.1;
%! b = 0.8;
%! c = -0.7;
%! xi =         [      0,       0,       0;
%!                     a,       0,       0;
%!                     0,       b,       0;
%!                     0,       0,       c;
%!                     0.5 * a,       0,       0;
%!                     0.5 * a, 0.5 * b,       0;
%!                     0, 0.5 * b,       0;
%!                     0,       0, 0.5 * c;
%!                     0.5 * a,       0, 0.5 * c;
%!                     0, 0.5 * b, 0.5 * c];
%! lambda = zeros(30, N);
%! for i=1:N
%!   R1 = euler123_to_rotation_matrix([Phi1(i); Phi2(i); Phi3(i)]);
%!   mesh.nodes = [(xi + x0(i, :)) * R1.', zeros(rows(xi), 3)];
%!   V = a * b * c / 6;
%!   mesh.elements.tet10 = int32(1:10);
%!   mesh.materials.tet10 = int32(1);
%!   E = 210000e6;
%!   nu = 0.3;
%!   mesh.material_data.rho = 1;
%!   mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   load_case.locked_dof = false(rows(mesh.nodes), 6);
%!   load_case.loaded_nodes = int32([3; 3]);
%!   load_case.loads = [0, 0, -0.5;
%!                      0, 0, -0.5];
%!   [dof_map] = fem_ass_dof_map(mesh, load_case);
%!   [K, ...
%!    M, ...
%!    Mlumped, ...
%!    dm, ...
%!    C1] = fem_ass_matrix(mesh, ...
%!                         dof_map, ...
%!                         [FEM_MAT_STIFFNESS, ...
%!                          FEM_MAT_MASS, ...
%!                          FEM_MAT_MASS_LUMPED, ...
%!                          FEM_SCA_TOT_MASS, ...
%!                          FEM_MAT_ACCEL_LOAD]);
%!   R2 = eye(3) + skew([Phi1(N - i + 1); Phi2(N - i + 1); Phi3(N - i + 1)]);
%!   def = mesh.nodes(:, 1:3) * R2.' - mesh.nodes(:, 1:3) + repmat(x0(N - i + 1, :), 10, 1);
%!   if i == 1
%!     K0 = K;
%!     M0 = M;
%!   else
%!     T = zeros(columns(K), columns(K));
%!     for j=1:rows(mesh.nodes)
%!       T((j - 1) * 3 + (1:3), (j - 1) * 3 + (1:3)) = R1;
%!     endfor
%!     assert(T.' * K * T, K0, tol * norm(K0));
%!     assert(T.' * M * T, M0, tol * norm(M0));
%!   endif
%!   U = zeros(30, 1);
%!   for j=1:3
%!     U(j:3:end) = def(:, j);
%!   endfor
%!   R = full(K * U);
%!   [Phi, lam] = eig(K);
%!   [lam, idx_lambda] = sort(diag(lam));
%!   Phi = Phi(:, idx_lambda);
%!   lambda(:, i) = lam;
%!   assert(max(abs(R)) < tol * norm(K * Phi(:, end)));
%!   assert(0.5 * U.' * K * U < tol * Phi(:, end).' * K * Phi(:, end));
%!   assert(rank(K), 24);
%!   assert(isdefinite(K), false);
%!   assert(isdefinite(M), true);
%!   assert(isdefinite(Mlumped), true);
%!   assert(length(find(lambda(:, i) < tol * max(lambda(:, i)))), 6);
%!   assert(all(lambda(:, i) > -tol * max(lambda(:, i))));
%!   assert(lambda(:, i), lambda(:, 1), tol * max(max(abs(lambda(:, 1)))));
%!   assert(dm, mesh.material_data.rho * V, mesh.material_data.rho * V * tol);
%!   assert(full(sum(diag(Mlumped))) / 3, dm, tol * dm);
%!   assert(all(abs(full(diag(Mlumped)) - dm / 10) < tol * dm));
%!   assert(full(sum(C1, 1)), repmat(dm, 1, 3), tol * dm);
%! endfor

%!test
%! ## TEST 12
%! tol = eps^0.9;
%! mesh.nodes = [2, 3, 4;
%!               6, 3, 2;
%!               2, 5, 1;
%!               4, 3, 6];
%! mesh.nodes = [mesh.nodes;
%!               0.5 * (mesh.nodes(1, :) + mesh.nodes(2, :));
%!               0.5 * (mesh.nodes(2, :) + mesh.nodes(3, :));
%!               0.5 * (mesh.nodes(1, :) + mesh.nodes(3, :));
%!               0.5 * (mesh.nodes(1, :) + mesh.nodes(4, :));
%!               0.5 * (mesh.nodes(2, :) + mesh.nodes(4, :));
%!               0.5 * (mesh.nodes(3, :) + mesh.nodes(4, :))];
%! mesh.nodes = [mesh.nodes, zeros(rows(mesh.nodes), 3)];
%! mesh.elements.tet10 = int32(1:10);
%! mesh.materials.tet10 = int32(1);
%! E = 480;
%! nu = 1/3;
%! mesh.material_data.rho = 1;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! load_case.loaded_nodes = zeros(1, 0, "int32");
%! load_case.loads = zeros(0, 3);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! iperm = dof_map.ndof(:, 1:3).';
%! iperm = reshape(iperm, numel(iperm), 1);
%! [K, ...
%!  M, ...
%!  Mlumped, ...
%!  dm] = fem_ass_matrix(mesh, ...
%!                       dof_map, ...
%!                       [FEM_MAT_STIFFNESS, ...
%!                        FEM_MAT_MASS, ...
%!                        FEM_MAT_MASS_LUMPED, ...
%!                        FEM_SCA_TOT_MASS]);
%! Vref = 4;
%! assert(dm, Vref, tol * Vref);
%! assert(isdefinite(K), false);
%! assert(isdefinite(M), true);
%! assert(isdefinite(Mlumped), true);
%! Kref = [447	324	72	1	-6	-12	54	48	0	94	66	36	-152	-90	12	55	42	-12	-311	-252	-24	-431	-306	-132	95	60	24	148	114	36
%!         324	1032	162	24	-104	-42	24	216	12	60	232	84	-180	-32	72	48	112	-30	-180	-992	-90	-288	-1040	-306	84	128	42	84	448	96
%!         72	162	339	0	-30	-35	0	24	54	24	60	94	-24	36	-8	0	-6	19	-24	-126	-275	-96	-234	-395	24	30	59	24	84	148
%!         1	24	0	87	-54	-36	18	-24	0	10	-18	-12	-32	-54	12	-83	90	12	19	0	0	11	6	-12	-59	72	48	28	-42	-12
%!         -6	-104	-30	-54	132	54	-12	72	12	0	76	36	36	268	72	54	-260	-54	-18	-32	-18	-6	-28	6	18	-272	-126	-12	148	48
%!         -12	-42	-35	-36	54	87	0	24	18	0	36	46	48	108	76	12	-90	-83	-12	-18	-17	-12	-6	11	12	-126	-167	0	60	64
%!         54	24	0	18	-12	0	108	0	0	-36	-12	0	72	12	0	-90	36	0	-198	-72	0	18	12	0	-18	-24	0	72	36	0
%!         48	216	24	-24	72	24	0	432	0	-24	-144	-48	24	288	48	72	-360	-72	-144	-792	-72	24	72	-24	-48	-72	-24	72	288	144
%!         0	12	54	0	12	18	0	0	108	0	-24	-36	0	24	72	0	-36	-90	0	-36	-198	0	-12	18	0	-12	-18	0	72	72
%!         94	60	24	10	0	0	-36	-24	0	204	108	72	104	60	24	-26	-24	0	58	36	24	-350	-216	-96	-98	-36	-24	40	36	-24
%!         66	232	60	-18	76	36	-12	-144	-24	108	492	216	48	308	96	-30	-68	12	54	88	36	-234	-860	-252	18	-392	-180	0	268	0
%!         36	84	94	-12	36	46	0	-48	-36	72	216	312	24	120	140	-12	-12	10	36	36	58	-132	-324	-386	12	-180	-242	-24	72	4
%!         -152	-180	-24	-32	36	48	72	24	0	104	48	24	1416	648	144	-392	-336	0	232	336	96	136	216	48	-680	-504	-240	-704	-288	-96
%!         -90	-32	36	-54	268	108	12	288	24	60	308	120	648	3936	864	-312	-1424	96	456	352	192	216	256	-288	-648	-1568	-576	-288	-2384	-576
%!         12	72	-8	12	72	76	0	48	72	24	96	140	144	864	1416	-48	-96	-248	144	96	232	48	-144	-152	-240	-432	-680	-96	-576	-848
%!         55	48	0	-83	54	12	-90	72	0	-26	-30	-12	-392	-312	-48	376	0	-96	-152	-192	0	-116	-72	48	292	144	0	136	288	96
%!         42	112	-6	90	-260	-90	36	-360	-36	-24	-68	-12	-336	-1424	-96	0	928	0	-96	256	96	-72	-176	72	216	736	216	144	256	-144
%!         -12	-30	19	12	-54	-83	0	-72	-90	0	12	10	0	96	-248	-96	0	376	96	192	136	48	72	-116	-48	72	148	0	-288	-152
%!         -311	-180	-24	19	-18	-12	-198	-144	0	58	54	36	232	456	144	-152	-96	96	1048	576	192	292	168	-48	-308	-144	-96	-680	-672	-288
%!         -252	-992	-126	0	-32	-18	-72	-792	-36	36	88	36	336	352	96	-192	256	192	576	2176	288	192	736	168	-144	-224	-72	-480	-1568	-528
%!         -24	-90	-275	0	-18	-17	0	-72	-198	24	36	58	96	192	232	0	96	136	192	288	760	0	120	148	-96	-72	-164	-192	-480	-680
%!         -431	-288	-96	11	-6	-12	18	24	0	-350	-234	-132	136	216	48	-116	-72	48	292	192	0	984	648	144	-152	-72	48	-392	-408	-48
%!         -306	-1040	-234	6	-28	-6	12	72	-12	-216	-860	-324	216	256	-144	-72	-176	72	168	736	120	648	2208	432	-216	256	144	-240	-1424	-48
%!         -132	-306	-395	-12	6	11	0	-24	18	-96	-252	-386	48	-288	-152	48	72	-116	-48	168	148	144	432	984	48	144	136	0	48	-248
%!         95	84	24	-59	18	12	-18	-48	0	-98	18	12	-680	-648	-240	292	216	-48	-308	-144	-96	-152	-216	48	696	216	144	232	504	144
%!         60	128	30	72	-272	-126	-24	-72	-12	-36	-392	-180	-504	-1568	-432	144	736	72	-144	-224	-72	-72	256	144	216	1056	432	288	352	144
%!         24	42	59	48	-126	-167	0	-24	-18	-24	-180	-242	-240	-576	-680	0	216	148	-96	-72	-164	48	144	136	144	432	696	96	144	232
%!         148	84	24	28	-12	0	72	72	0	40	0	-24	-704	-288	-96	136	144	0	-680	-480	-192	-392	-240	0	232	288	96	1120	432	192
%!         114	448	84	-42	148	60	36	288	72	36	268	72	-288	-2384	-576	288	256	-288	-672	-1568	-480	-408	-1424	48	504	352	144	432	3616	864
%!         36	96	148	-12	48	64	0	144	72	-24	0	4	-96	-576	-848	96	-144	-152	-288	-528	-680	-48	-48	-248	144	144	232	192	864	1408];

%! assert(full(K(iperm,iperm)), Kref, tol * norm(Kref));
%! assert(eig(K), eig(Kref), tol * max(eig(Kref)));
%! assert(sum(full(diag(Mlumped))) / 3, dm, tol * dm);

%!test
%! ## TEST 13
%! tol = eps^0.5;
%! N = 10;
%! Phi1 = linspace(0, 90 * pi / 180, N);
%! Phi2 = linspace(0, -30 * pi / 180, N);
%! Phi3 = linspace(0, 20 * pi / 180, N);
%! x0 = [linspace(-1, 1, N);
%!       linspace(0, 3, N);
%!       linspace(-3, 0, N)].';
%! a = -0.1;
%! b = 0.8;
%! c = -0.7;
%! xi =         [      0,       0,       0;
%!                     a,       0,       0;
%!                     0,       b,       0;
%!                     0,       0,       c;
%!                     0.5 * a,       0,       0;
%!                     0.5 * a, 0.5 * b,       0;
%!                     0, 0.5 * b,       0;
%!                     0,       0, 0.5 * c;
%!                     0.5 * a,       0, 0.5 * c;
%!                     0, 0.5 * b, 0.5 * c];
%! lambda = zeros(30, N);
%! for i=1:N
%!   mesh.nodes = [, zeros(rows(xi), 3)];
%!   R1 = euler123_to_rotation_matrix([Phi1(i); Phi2(i); Phi3(i)]);
%!   mesh.nodes = [(xi + x0(i, :)) * R1.', zeros(rows(xi), 3)];
%!   V = a * b * c / 6;
%!   mesh.elements.tet10 = int32(1:10);
%!   mesh.materials.tet10 = int32(1);
%!   E = 210000e6;
%!   nu = 0.3;
%!   mesh.material_data.rho = 1;
%!   mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   load_case.locked_dof = false(rows(mesh.nodes), 6);
%!   load_case.loaded_nodes = int32([3; 3]);
%!   load_case.loads = [0, 0, -0.5;
%!                      0, 0, -0.5];
%!   if i == 1
%!     [dof_map] = fem_ass_dof_map(mesh, load_case);
%!   endif
%!   [K, ...
%!    M, ...
%!    Mlumped, ...
%!    dm] = fem_ass_matrix(mesh, ...
%!                         dof_map, ...
%!                         [FEM_MAT_STIFFNESS, ...
%!                          FEM_MAT_MASS, ...
%!                          FEM_MAT_MASS_LUMPED, ...
%!                          FEM_SCA_TOT_MASS]);
%!   R2 = eye(3) + skew([Phi1(N - i + 1); Phi2(N - i + 1); Phi3(N - i + 1)]);
%!   def = mesh.nodes(:, 1:3) * R2.' - mesh.nodes(:, 1:3) + repmat(x0(N - i + 1, :), 10, 1);
%!   if i == 1
%!     K0 = K;
%!     M0 = M;
%!   else
%!     T = zeros(columns(K), columns(K));
%!     for j=1:rows(mesh.nodes)
%!       T((j - 1) * 3 + (1:3), (j - 1) * 3 + (1:3)) = R1;
%!     endfor
%!     assert(T.' * K * T, K0, tol * norm(K0));
%!     assert(T.' * M * T, M0, tol * norm(M0));
%!   endif
%!   U = zeros(30, 1);
%!   for j=1:3
%!     U(j:3:end) = def(:, j);
%!   endfor
%!   R = full(K * U);
%!   [Phi, lam] = eig(K);
%!   [lam, idx_lambda] = sort(diag(lam));
%!   Phi = Phi(:, idx_lambda);
%!   lambda(:, i) = lam;
%!   assert(max(abs(R)) < tol * norm(K * Phi(:, end)));
%!   assert(0.5 * U.' * K * U < tol * Phi(:, end).' * K * Phi(:, end));
%!   assert(rank(K), 24);
%!   assert(isdefinite(K), false);
%!   assert(isdefinite(M), true);
%!   assert(isdefinite(Mlumped), true);
%!   assert(length(find(lambda(:, i) < tol * max(lambda(:, i)))), 6);
%!   assert(all(lambda(:, i) > -tol * max(lambda(:, i))));
%!   assert(lambda(:, i), lambda(:, 1), tol * max(max(abs(lambda(:, 1)))));
%!   diagM = full(diag(Mlumped));
%!   assert(diagM(1:3:end), diagM(2:3:end));
%!   assert(diagM(1:3:end), diagM(3:3:end));
%!   assert(sum(diagM) / 3, dm, tol * dm);
%! endfor

%!test
%! ## TEST 14
%! tol = eps^0.9;
%! mesh.nodes = [                      0                     0                     0                     0                     0                     0
%!                                     0.0200000000000271                     0                     0                     0                     0                     0
%!                                     0.0200000000000271                     0                  0.01                     0                     0                     0
%!                                     0.0199999999999727                  0.02                  0.01                     0                     0                     0
%!                                     0.0230010932944744   0.00727223032069712                     0                     0                     0                     0
%!                                     0.0236002186588899    0.0134544460641435                     0                     0                     0                     0
%!                                     0.00639978134111501   0.00654555393584972                     0                     0                     0                     0
%!                                     0.0031998906705575   0.00327277696792486                     0                     0                     0                     0
%!                                     0.0233006559766821    0.0103633381924203                     0                     0                     0                     0
%!                                     0.0200000000000271                     0                 0.005                     0                     0                     0
%!                                     0.0150000000000021   0.00999999999999402                  0.01                     0                     0                     0
%!                                     0.0236002186588899    0.0134544460641435                  0.01                     0                     0                     0
%!                                     0.0218001093294313    0.0167272230320718                  0.01                     0                     0                     0
%!                                     0.019300109329446    0.0117272230320688                  0.01                     0                     0                     0
%!                                     0.0183765032001916    0.0147985283938626   0.00442070167465085                     0                     0                     0
%!                                     0.0253858140372129    0.0044194172742513   0.00499979173504266                     0                     0                     0
%!                                     0.0167445797465365    0.0044730547330275   0.00500072861704665                     0                     0                     0
%!                                     0.0256603500674828    0.0159474197013384    0.0049792497177231                     0                     0                     0
%!                                     0.00263510354742526   0.00539391676103282   0.00258383947602597                     0                     0                     0
%!                                     0.00551663176184135   0.00268725147164801   0.00256578374471423                     0                     0                     0
%!                                     0.020688798247333    0.0110353793572799   0.00221035083732542                     0                     0                     0
%!                                     0.0166882516000969    0.0123992641969283   0.00721035083732542                     0                     0                     0
%!                                     0.0190005466472383   0.00863611516034557                 0.005                     0                     0                     0
%!                                     0.0233006559766821    0.0103633381924203                 0.005                     0                     0                     0
%!                                     0.0209883609295407    0.0141264872290031   0.00721035083732542                     0                     0                     0
%!                                     0.0040758676546333   0.00404058411634041    0.0025748116103701                     0                     0                     0
%!                                     0.00275831588092067   0.00134362573582401   0.00128289187235711                     0                     0                     0
%!                                     0.00131755177371263   0.00269695838051641   0.00129191973801298                     0                     0                     0
%!                                     0.00451744244427013   0.00596973534844127   0.00129191973801298                     0                     0                     0
%!                                     0.00595820655147818   0.00461640270374886   0.00128289187235711                     0                     0                     0
%!                                     0.0236002186588899    0.0134544460641435                 0.005                     0                     0                     0
%!                                     0.0209883609295407    0.0141264872290031   0.00221035083732542                     0                     0                     0
%!                                     0.0191882516000822    0.0173992641969313   0.00721035083732542                     0                     0                     0
%!                                     0.0246302843631863     0.014700932882741   0.00748962485886155                     0                     0                     0
%!                                     0.0228301750337278    0.0179737098506692   0.00748962485886155                     0                     0                     0
%!                                     0.0220184266338372    0.0153729740476005   0.00469997569618697                     0                     0                     0
%!                                     0.0183722898732818   0.00223652736651375   0.00250036430852333                     0                     0                     0
%!                                     0.0183722898732818   0.00223652736651375   0.00750036430852333                     0                     0                     0
%!                                     0.02269290701862   0.00220970863712565   0.00249989586752133                     0                     0                     0
%!                                     0.02269290701862   0.00220970863712565   0.00749989586752133                     0                     0                     0
%!                                     0.0210651968918747    0.0044462360036394   0.00500026017604466                     0                     0                     0];

%! mesh.elements.tet10 = [   5  15  11  12  21  22  23  24  25  14
%!                           19  20   1   7  26  27  28  29  30   8
%!                           5  15  12   6  21  25  24   9  32  31
%!                           12  15   4  18  25  33  13  34  36  35
%!                           2  17   3  16  37  38  10  39  41  40];

%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = 1;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! mesh.materials.tet10 = ones(rows(mesh.elements.tet10), 1, "int32");
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [K, ...
%!  M, ...
%!  Mlumped, ...
%!  dm] = fem_ass_matrix(mesh, ...
%!                       dof_map, ...
%!                       [FEM_MAT_STIFFNESS, ...
%!                        FEM_MAT_MASS, ...
%!                        FEM_MAT_MASS_LUMPED, ...
%!                        FEM_SCA_TOT_MASS]);
%! diagM = full(diag(Mlumped));
%! assert(sum(diagM) / 3, dm, tol * dm);
%! assert(diagM(1:3:end), diagM(2:3:end));
%! assert(diagM(1:3:end), diagM(3:3:end));

%!test
%! ## TEST 15
%! if (exist("fem_tests_enable_plotting"))
%! do_plot = fem_tests_enable_plotting();
%! else
%! do_plot = false;
%! endif
%! close all;
%! SI_unit_m = 1e-3;
%! SI_unit_kg = 1e3;
%! SI_unit_s = 1;
%! SI_unit_N = SI_unit_kg * SI_unit_m / SI_unit_s^2;
%! SI_unit_Pa = SI_unit_N / SI_unit_m^2;

%! a = 150e-3 / SI_unit_m;
%! b = 20e-3 / SI_unit_m;
%! c = 45e-3 / SI_unit_m;
%! d = 10e-3 / SI_unit_m;
%! e = 10e-3 / SI_unit_m;
%! scale_def = 25e-3 / SI_unit_m;
%! tol = eps^0.5;
%! tol2 = eps^0.2;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  ## 1
%!       0,  0.5 * b,  0.5 * c;  ## 2
%!       0, -0.5 * b,  0.5 * c;  ## 3
%!       0.5 * a, -0.5 * b,  0.5 * c;  ## 4
%!       0.5 * a,  0.5 * b, -0.5 * c;  ## 5
%!       0,  0.5 * b, -0.5 * c;  ## 6
%!       0, -0.5 * b, -0.5 * c;  ## 7
%!       0.5 * a, -0.5 * b, -0.5 * c,  ## 8
%!       a,  0.5 * b,  0.5 * c;  ## 9
%!       a, -0.5 * b,  0.5 * c;  ## 10
%!       a,  0.5 * b, -0.5 * c;  ## 11
%!       a, -0.5 * b, -0.5 * c,  ## 12
%!       a + d,        0,        0;  ## 13
%!       -e,        0,        0]; ## 14
%! algorithms = {"eliminate", "unsymmetric", "shift-invert", "diag-shift-invert"};
%! for ialg=1:numel(algorithms)
%!   data(ialg).mesh.nodes = [X, zeros(rows(X), 3)];
%!   data(ialg).mesh.elements.iso8 = int32([1:8;
%!                                          9, 1, 4, 10, 11, 5, 8, 12]);
%!   data(ialg).mesh.materials.iso8 = int32([1; 1]);
%!   data(ialg).mesh.elements.rbe3(1).nodes = int32([13, 9, 10, 11, 12]);
%!   data(ialg).mesh.elements.rbe3(1).weight = ones(1, 4);
%!   data(ialg).mesh.elements.rbe3(2).nodes = int32([14, 2, 3, 6, 7]);
%!   data(ialg).mesh.elements.rbe3(2).weight = ones(1, 4);
%!   E = 210000e6 / (SI_unit_N / SI_unit_m^2);
%!   nu = 0.3;
%!   data(ialg).mesh.material_data.rho = 7850 / (SI_unit_kg / SI_unit_m^3);
%!   data(ialg).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   data(ialg).load_case.locked_dof = false(rows(data(ialg).mesh.nodes), 6);
%!   data(ialg).cms_opt.verbose = false;
%!   data(ialg).cms_opt.modes.number = int32(6);
%!   data(ialg).cms_opt.nodes.modal.number = int32(14);
%!   data(ialg).cms_opt.nodes.interfaces.number = int32(13);
%!   data(ialg).cms_opt.number_of_threads = 1;
%!   data(ialg).cms_opt.algorithm = algorithms{ialg};
%!   data(ialg).cms_opt.invariants = false;
%!   [data(ialg).mesh_cms, ...
%!    data(ialg).mat_ass_cms, ...
%!    data(ialg).dof_map_cms, ...
%!    data(ialg).sol_eig_cms] = fem_cms_create(data(ialg).mesh, data(ialg).load_case, data(ialg).cms_opt);
%!   data(ialg).mesh.elements.joints = struct("nodes", cell(1, 1), "C", cell(1,1));
%!   data(ialg).load_case.joints = struct("U", cell(1, 1));
%!   data(ialg).mesh.elements.joints(1).nodes = data(ialg).cms_opt.nodes.modal.number;
%!   data(ialg).mesh.elements.joints(1).C = eye(6);
%!   data(ialg).load_case.joints(1).U = zeros(6, 1);
%!   data(ialg).load_case.loaded_nodes = [data(ialg).cms_opt.nodes.interfaces.number];
%!   data(ialg).load_case.loads = [0, 0, -1, 0, 0, 0] / SI_unit_N;
%!   data(ialg).dof_map = fem_ass_dof_map(data(ialg).mesh, data(ialg).load_case);
%!   [data(ialg).mat_ass.M, ...
%!    data(ialg).mat_ass.K, ...
%!    data(ialg).mat_ass.R, ...
%!    data(ialg).mat_ass.m, ...
%!    data(ialg).mat_ass.mat_info] = fem_ass_matrix(data(ialg).mesh, ...
%!                                                  data(ialg).dof_map, ...
%!                                                  [FEM_MAT_MASS, ...
%!                                                   FEM_MAT_STIFFNESS, ...
%!                                                   FEM_VEC_LOAD_CONSISTENT, ...
%!                                                   FEM_SCA_TOT_MASS], ...
%!                                                  data(ialg).load_case);
%!   mref = data(ialg).mesh.material_data.rho * a * b * c;
%!   assert(data(ialg).mat_ass.m, mref, sqrt(eps) * mref);
%!   [Rred] = fem_ass_matrix(data(ialg).mesh_cms, ...
%!                           data(ialg).dof_map_cms, ...
%!                           [FEM_VEC_LOAD_CONSISTENT], ...
%!                           rmfield(data(ialg).load_case, "joints"));
%!   U = full(data(ialg).mat_ass.K \ data(ialg).mat_ass.R);
%!   def_stat = fem_post_def_nodal(data(ialg).mesh, data(ialg).dof_map, U);
%!   ured = data(ialg).mat_ass_cms.Tred * (data(ialg).mat_ass_cms.Kred \ (data(ialg).mat_ass_cms.Tred.' * Rred(data(ialg).dof_map_cms.idx_node, :)));
%!   Ured = zeros(data(ialg).dof_map_cms.totdof, columns(Rred));
%!   Ured(data(ialg).dof_map_cms.idx_node, :) = ured;
%!   def_red_stat = fem_post_def_nodal(data(ialg).mesh, data(ialg).dof_map_cms, Ured);
%!   [data(ialg).mat_ass.Tc, data(ialg).mat_ass.Kc, data(ialg).mat_ass.Mc] = fem_cms_constr_elim(data(ialg).mesh, data(ialg).dof_map, data(ialg).mat_ass);
%!   [phi, lambda] = fem_sol_eigs(data(ialg).mat_ass.Kc, data(ialg).mat_ass.Mc, data(ialg).cms_opt.modes.number);
%!   Phi = zeros(data(ialg).dof_map.totdof, columns(phi));
%!   Phi(data(ialg).dof_map.idx_node, :) = data(ialg).mat_ass.Tc * phi;
%!   def_modal = fem_post_def_nodal(data(ialg).mesh, data(ialg).dof_map, Phi);
%!   [phi_red, lambda_red] = fem_sol_eigs(data(ialg).mat_ass_cms.Kred, data(ialg).mat_ass_cms.Mred, data(ialg).cms_opt.modes.number);
%!   Phi_red = zeros(data(ialg).dof_map_cms.totdof, columns(phi_red));
%!   Phi_red(data(ialg).dof_map_cms.idx_node, :) = data(ialg).mat_ass_cms.Tred * phi_red;
%!   def_red_modal = fem_post_def_nodal(data(ialg).mesh, data(ialg).dof_map_cms, Phi_red);
%!   for i=1:size(def_red_modal, 3)
%!     phi = reshape(def_modal(:, :, i).', size(def_modal, 1) * size(def_modal, 2), 1);
%!     phi /= max(abs(phi));
%!     min_fPhi = inf;
%!     min_flambda = inf;
%!     for j=1:columns(Phi_red)
%!       phi_red = reshape(def_red_modal(:, :, j).', size(def_red_modal, 1) * size(def_red_modal, 2), 1);
%!       phi_red /= max(abs(phi_red));
%!       if norm(phi + phi_red) < norm(phi - phi_red)
%!         phi_red *= -1;
%!       endif
%!       fPhi = norm(phi_red - phi);
%!       flambda = abs(lambda_red(j) - lambda(i));
%!       if fPhi < min_fPhi && flambda < min_flambda
%!         min_fPhi = fPhi;
%!         min_flambda = flambda;
%!         phi_red_opt = phi_red;
%!         lambda_red_opt = lambda_red(j);
%!       endif
%!     endfor
%!     assert(phi_red_opt, phi, tol2 * norm(phi));
%!     assert(lambda_red_opt, lambda(i), tol2 * max(abs(lambda)));
%!   endfor
%!   assert(lambda_red, lambda, tol2 * max(abs(lambda)));
%!   for i=1:size(def_stat, 3)
%!     assert(def_red_stat, def_stat, tol * max(norm(def_stat(:, :, i), "rows")));
%!   endfor
%!   assert(isdefinite(data(ialg).mat_ass_cms.Kred), true);
%!   assert(isdefinite(data(ialg).mat_ass_cms.Mred), true);
%!   for i=1:3
%!     assert(sum(data(ialg).mat_ass_cms.diagM(i:3:end)), data(ialg).mat_ass.m, tol * data(ialg).mat_ass.m);
%!   endfor
%!   if (do_plot)
%!     for i=1:numel(data(ialg).sol_eig_cms.f)
%!       figure("visible","off");
%!       fem_post_sol_plot(data(ialg).mesh, data(ialg).sol_eig_cms, scale_def / max(norm(data(ialg).sol_eig_cms.def(:, 1:3, i), "rows")), i);
%!       xlabel("x [m]");
%!       ylabel("y [m]");
%!       zlabel("z [m]");
%!       grid on;
%!       grid minor on;
%!       title(sprintf("mode %d: f=%.0fHz", i, data(ialg).sol_eig_cms.f(i)));
%!     endfor
%!     figure_list();
%!   endif
%! endfor
%! for i=2:numel(data)
%!   assert([data(i).sol_eig_cms.f],[data(1).sol_eig_cms.f], tol * max([data(1).sol_eig_cms.f]));
%!   assert(data(i).mat_ass.M, data(1).mat_ass.M, 0);
%!   assert(data(i).mat_ass.K, data(1).mat_ass.K, 0);
%! endfor

%!test
%! ## TEST 16
%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;
%! geometry.l = 1000e-3;
%! geometry.w = 10e-3;
%! geometry.h = 50e-3;
%! elem_size = 5e-3;
%! mesh_size.num_elem_l = ceil(geometry.l / elem_size);
%! mesh_size.num_elem_w = ceil(geometry.w / elem_size);
%! mesh_size.num_elem_h = ceil(geometry.h / elem_size);
%! number_of_modes = 10;
%! number_of_modes_disp = 3;
%! plot_def = fem_tests_enable_plotting();
%! f = [ 0; 0; 15000];
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, f);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass_sym.K, ...
%!  mat_ass_sym.R, ...
%!  mat_ass.K, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT, ...
%!                               FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! opt_sol.solver = "chol";
%! [sol_stat_sym] = fem_sol_static(mesh, dof_map, mat_ass_sym, opt_sol);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! assert(sol_stat_sym.def, sol_stat.def, sqrt(eps) * max(norm(sol_stat.def, "rows")));
%! z = linspace(0,geometry.l,100);
%! I = [ geometry.w * geometry.h, geometry.h * geometry.w^3 / 12, geometry.w * geometry.h^3 / 12 ];
%! y(1,:) = f(1) * geometry.l / ( material.E * I(1) ) * ( 1 - z / geometry.l );
%! for i=2:3
%!   y(i,:) = f(i) * geometry.l^3 / ( 6 * material.E * I(i) ) * ( 2 - 3 * z / geometry.l + ( z / geometry.l ).^3 );
%! endfor
%! uz = griddata3(mesh.nodes(:, 1), ...
%!                mesh.nodes(:, 2), ...
%!                mesh.nodes(:, 3), ...
%!                sol_stat.def(:, 3),  ...
%!                geometry.l - z, ...
%!                zeros(size(z)), ...
%!                zeros(size(z)), ...
%!                "linear");
%! assert(uz, y(3, :).', 1e-2 * max(abs(y(3, :))));

%!test
%! ##########################################################################################
%! ## TEST 17: Test case for elimination of Lagrange multipliers
%! ##########################################################################################
%! close all;
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! d = 140e-3;
%! scale_def = 20e3;
%! tol = eps^0.7;
%! tol2 = eps^0.6;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       0,  0.5 * b,  0.5 * c;  #  2
%!       0, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       0,  0.5 * b, -0.5 * c;  #  6
%!       0, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c,  #  8
%!       a,  0.5 * b,  0.5 * c;  #  9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c,  # 12
%!       d,        0,        0]; # 13
%! rand("seed", 0);
%! N = 20;
%! Phi1 = [0, (2 * rand(1, N) - 1) * 180] * pi / 180;
%! Phi2 = [0, (2 * rand(1, N) - 1) * 180] * pi / 180;
%! Phi3 = [0, (2 * rand(1, N) - 1) * 180] * pi / 180;
%! for j=1:length(Phi1)
%!   R1 = euler123_to_rotation_matrix([Phi1(j); Phi2(j); Phi3(j)]);
%!   assert(R1.' * R1, eye(3), tol);
%!   assert(R1 * R1.', eye(3), tol);
%!   data(j).T1 = [R1, zeros(3, 3);
%!                 zeros(3, 3), R1];
%!   data(j).mesh.nodes = [X * R1.', zeros(rows(X), 3)];
%!   data(j).mesh.elements.iso8 = int32([1:8;
%!                                       9, 1, 4, 10, 11, 5, 8, 12]);
%!   data(j).mesh.materials.iso8 = int32([1; 1]);
%!   data(j).mesh.elements.rbe3.nodes = int32([13, 9, 10, 11, 12]);
%!   data(j).mesh.elements.rbe3.weight = ones(1, 4);
%!   n1 = [0; 0.5; 0.2];
%!   n1 /= norm(n1);
%!   n2 = [1; 1; 1];
%!   n3 = cross(n1, n2);
%!   n2 = cross(n1, n3);
%!   n2 /= norm(n2);
%!   n3 /= norm(n3);
%!   t1 = [1; 0; 0];
%!   t2 = [0; 0; 1];
%!   data(j).mesh.elements.joints(1).nodes = int32([13]);
%!   data(j).mesh.elements.joints(1).C = [[(R1 * t1).'; (R1 * t2).'],    zeros(2, 3);
%!                                        zeros(2, 3), [(R1 * n2).'; (R1 * n3).']];
%!   for i=[2, 3, 6, 7]
%!     data(j).mesh.elements.joints(end + 1).nodes = int32(i);
%!     data(j).mesh.elements.joints(end).C = [R1.', zeros(3, 3)];
%!   endfor
%!   E = 210000e6;
%!   nu = 0.3;
%!   data(j).mesh.material_data.rho = 7850;
%!   data(j).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   data(j).load_case.locked_dof = false(rows(data(j).mesh.nodes), 6);
%!   data(j).load_case.loaded_nodes = int32([1; 4; 5; 8]);
%!   data(j).load_case.loads = repmat([0, 0, 10,  0,   0, 0] * data(j).T1.', 4, 1);
%!   data(j).dof_map = fem_ass_dof_map(data(j).mesh, data(j).load_case);
%!   [data(j).mat_ass.K, ...
%!    data(j).mat_ass_sym.K, ...
%!    data(j).mat_ass_sym_L.K, ...
%!    data(j).mat_ass.M, ...
%!    data(j).mat_ass_sym.M, ...
%!    data(j).mat_ass_sym_L.M, ...
%!    data(j).mat_ass.R, ...
%!    data(j).mat_ass_sym.R, ...
%!    data(j).mat_ass_sym_L.R, ...
%!    data(j).mat_ass.dm, ...
%!    data(j).mat_ass.mat_info] = fem_ass_matrix(data(j).mesh, ...
%!                                               data(j).dof_map, ...
%!                                               [FEM_MAT_STIFFNESS, ...
%!                                                FEM_MAT_STIFFNESS_SYM, ...
%!                                                FEM_MAT_STIFFNESS_SYM_L, ...
%!                                                FEM_MAT_MASS, ...
%!                                                FEM_MAT_MASS_SYM, ...
%!                                                FEM_MAT_MASS_SYM_L, ...
%!                                                FEM_VEC_LOAD_CONSISTENT, ...
%!                                                FEM_VEC_LOAD_CONSISTENT, ...
%!                                                FEM_VEC_LOAD_CONSISTENT, ...
%!                                                FEM_SCA_TOT_MASS], ...
%!                                               data(j).load_case);
%!   Ksym = data(j).mat_ass_sym.K + data(j).mat_ass_sym.K.' - diag(diag(data(j).mat_ass_sym.K));
%!   Ksym_L = data(j).mat_ass_sym_L.K + data(j).mat_ass_sym_L.K.' - diag(diag(data(j).mat_ass_sym_L.K));
%!   Msym = data(j).mat_ass_sym.M + data(j).mat_ass_sym.M.' - diag(diag(data(j).mat_ass_sym.M));
%!   Msym_L = data(j).mat_ass_sym_L.M + data(j).mat_ass_sym_L.M.' - diag(diag(data(j).mat_ass_sym_L.M));
%!   data(j).U = data(j).mat_ass.K \ full(data(j).mat_ass.R);
%!   assert(data(j).mat_ass.K * data(j).U, data(j).mat_ass.R, sqrt(eps) * max(max(abs(data(j).mat_ass.R))));
%!   assert(data(j).mat_ass.dm, data(j).mesh.material_data.rho * a * b * c, sqrt(eps) * data(j).mesh.material_data.rho * a * b * c);
%!   assert(rank(data(j).mat_ass.K), columns(data(j).mat_ass.K));
%!   assert(Ksym, data(j).mat_ass.K);
%!   assert(Msym, data(j).mat_ass.M);
%!   assert(Ksym_L, data(j).mat_ass.K);
%!   assert(Msym_L, data(j).mat_ass.M);
%! endfor

%!test
%! ##########################################################################################
%! ## TEST 18: Test case for pressure load
%! ##########################################################################################
%! a = 0.5;
%! b = 0.3;
%! c = 0.7;
%! p = 2.5e9;
%! if (exist("fem_tests_enable_plotting"))
%!   do_plot = fem_tests_enable_plotting();
%! else
%!   do_plot = false;
%! endif
%! scale = -0.5 * a;

%! X = [      0,       0,       0;
%!            a,       0,       0;
%!            0,       b,       0;
%!            0,       0,       c;
%!            0.5 * a,       0,       0;
%!            0.5 * a, 0.5 * b,       0;
%!            0, 0.5 * b,       0;
%!            0,       0, 0.5 * c;
%!            0.5 * a,       0, 0.5 * c;
%!            0, 0.5 * b, 0.5 * c].';
%! Phi1 = [0, 30, 120] * pi / 180;
%! Phi2 = [0, -45, 270] * pi / 180;
%! Phi3 = [0, 170, 310] * pi / 180;
%! if (do_plot)
%!   close all;
%! endif
%! for i=1:numel(Phi1)
%!   R1 = euler123_to_rotation_matrix([Phi1(i); Phi2(i); Phi3(i)]);
%!   data(i).mesh.nodes = [(R1 * X).', zeros(columns(X), 3)];
%!   data(i).mesh.elements.tet10 = int32(1:10);
%!   data(i).mesh.elements.joints = struct("C", cell(1,0), "nodes", cell(1,0));
%!   for j=[1,2,4,5,8,9]
%!     data(i).mesh.elements.joints(end + 1).nodes = j;
%!     data(i).mesh.elements.joints(end).C = [eye(3), zeros(3, 3)];
%!   endfor
%!   data(i).mesh.materials.tet10 = int32(1);
%!   E = 210000e6;
%!   nu = 0.3;
%!   data(i).mesh.material_data.rho = 7850;
%!   data(i).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   data(i).load_case.pressure.tria6.elements = int32([1,2,3,5,6,7]);
%!   data(i).load_case.pressure.tria6.p = [p, p, 0, p, 0.5 * p, 0.5 * p];
%!   data(i).load_case.locked_dof = false(rows(data(i).mesh.nodes), 6);
%!   [data(i).dof_map] = fem_ass_dof_map(data(i).mesh, data(i).load_case);
%!   [data(i).mat_ass.K, ...
%!    data(i).mat_ass.R, ...
%!    data(i).mat_ass.Rlumped] = fem_ass_matrix(data(i).mesh, ...
%!                                              data(i).dof_map, ...
%!                                              [FEM_MAT_STIFFNESS, ...
%!                                               FEM_VEC_LOAD_CONSISTENT, ...
%!                                               FEM_VEC_LOAD_LUMPED], ...
%!                                              data(i).load_case);
%!   data(i).Flumped = fem_post_def_nodal(data(i).mesh, data(i).dof_map, data(i).mat_ass.Rlumped);
%!   data(i).Fcon = fem_post_def_nodal(data(i).mesh, data(i).dof_map, data(i).mat_ass.R);
%!   assert(R1.' * sum(data(i).Fcon(:, 1:3), 1).', a * b * p / 3 * [0; 0; -1], eps * p);
%!   assert(R1.' * sum(data(i).Flumped(:, 1:3), 1).', a * b * p / 3 * [0; 0; -1], eps * p);
%!   data(i).sol_stat = fem_sol_static(data(i).mesh, data(i).dof_map, data(i).mat_ass);
%!   data(i).sol_stat_lumped = fem_sol_static(data(i).mesh, data(i).dof_map, setfield(data(i).mat_ass, "R", data(i).mat_ass.Rlumped));
%!   if (do_plot)
%!     figure("visible", "off");
%!     fem_post_sol_plot(data(i).mesh, data(i).sol_stat, scale / max(norm(data(i).sol_stat.def, "rows")), 1);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("consistent load case %d", i));
%!     figure("visible", "off");
%!     fem_post_sol_plot(data(i).mesh, data(i).sol_stat_lumped, scale / max(norm(data(i).sol_stat_lumped.def, "rows")), 1);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("lumped load case %d", i));
%!   endif
%! endfor
%! if (do_plot)
%!   figure_list();
%! endif

%!test
%! ##########################################################################################
%! ## TEST 19: Test case for sfncon4
%! ##########################################################################################
%! close all;
%! p = 1.25e6;
%! a = 15e-3;
%! b = 25e-3;
%! c = 20e-3;
%! A = 20e-3;
%! B = 30e-3;
%! C = 40e-3;
%! scale = 10e-3;
%! num_modes = int32(6);
%! do_plot = fem_tests_enable_plotting();
%! X = [-0.5 * a, -0.5 * b, c + C;
%!      0.5 * a, -0.5 * b, c + C;
%!      0.5 * a,  0.5 * b, c + C;
%!      -0.5 * a,  0.5 * b, c + C;
%!      -0.5 * a, -0.5 * b, C;
%!      0.5 * a, -0.5 * b, C;
%!      0.5 * a,  0.5 * b, C;
%!      -0.5 * a,  0.5 * b, C;
%!      -0.5 * A, -0.5 * B, C;
%!      0.5 * A, -0.5 * B, C;
%!      0.5 * A,  0.5 * B, C;
%!      -0.5 * A,  0.5 * B, C;
%!      -0.5 * A, -0.5 * B, 0;
%!      0.5 * A, -0.5 * B, 0;
%!      0.5 * A,  0.5 * B, 0;
%!      -0.5 * A,  0.5 * B, 0];

%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9:16]);
%! mesh.elements.sfncon4.master = int32(9:12);
%! mesh.elements.sfncon4.slave = int32(5:8).';
%! mesh.elements.sfncon4.maxdist = sqrt(eps) * max(norm(X, "rows"));
%! E(1) = 210000e6;
%! nu(1) = 0.3;
%! mesh.material_data(1).rho = 7850;

%! E(2) = 70000e6;
%! nu(2) = 0.3;
%! mesh.material_data(2).rho = 2700;

%! for i=1:numel(mesh.material_data)
%!   mesh.material_data(i).C = fem_pre_mat_isotropic(E(i), nu(i));
%! endfor

%! mesh.materials.iso8 = int32([1; 2]);
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof(13:16, 1:3) = true;
%! load_case.pressure.iso4.elements = int32([1,2,3,4]);
%! load_case.pressure.iso4.p = repmat(p, 1, 4);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M, ...
%!  mat_ass.R, ...
%!  mat_ass.dm, ...
%!  mat_ass.S, ...
%!  mat_ass.J, ...
%!  mat_ass.C1, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS, ...
%!                                       FEM_MAT_MASS, ...
%!                                       FEM_VEC_LOAD_CONSISTENT, ...
%!                                       FEM_SCA_TOT_MASS, ...
%!                                       FEM_VEC_INERTIA_M1, ...
%!                                       FEM_MAT_INERTIA_J, ...
%!                                       FEM_MAT_ACCEL_LOAD], ...
%!                                      load_case);
%! sol_stat = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_eig = fem_sol_modal(mesh, dof_map, mat_ass, num_modes);
%! if (do_plot)
%!   figure("visible", "off");
%!   fem_post_sol_plot(mesh, sol_stat, scale / max(norm(sol_stat.def(:, 1:3), "rows")), 1);
%!   xlabel("x [m]");
%!   ylabel("y [m]");
%!   zlabel("z [m]");
%!   grid on;
%!   grid minor on;
%!   title("static deflection");

%!   for i=1:numel(sol_eig.f)
%!     figure("visible", "off");
%!     fem_post_sol_plot(mesh, sol_eig, scale / max(norm(sol_eig.def(:, 1:3, i), "rows")), i);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("mode %d: %.1fHz", i, sol_eig.f(i)));
%!   endfor
%!   figure_list();
%! endif

%!test
%! ##########################################################################################
%! ## TEST 20: Test case for sfncon4
%! ##########################################################################################
%! close all;
%! p = 1.25e6;
%! a = 15e-3;
%! b = 25e-3;
%! c = 20e-3;
%! A = 20e-3;
%! B = 30e-3;
%! C = 40e-3;
%! scale = 10e-3;
%! num_modes = int32(6);
%! do_plot = fem_tests_enable_plotting();
%! X = [-0.5 * a, -0.5 * b, c + C;
%!      0.5 * a, -0.5 * b, c + C;
%!      0.5 * a,  0.5 * b, c + C;
%!      -0.5 * a,  0.5 * b, c + C;
%!      -0.5 * a, -0.5 * b, C;
%!      0.5 * a, -0.5 * b, C;
%!      0.5 * a,  0.5 * b, C;
%!      -0.5 * a,  0.5 * b, C;
%!      -0.5 * A, -0.5 * B, C;
%!      0.5 * A, -0.5 * B, C;
%!      0.5 * A,  0.5 * B, C;
%!      -0.5 * A,  0.5 * B, C;
%!      -0.5 * A, -0.5 * B, 0;
%!      0.5 * A, -0.5 * B, 0;
%!      0.5 * A,  0.5 * B, 0;
%!      -0.5 * A,  0.5 * B, 0];

%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9:16]);
%! mesh.elements.sfncon4.master = int32(9:12);
%! mesh.elements.sfncon4.slave = int32(5:8).';
%! mesh.elements.sfncon4.maxdist = sqrt(eps) * max(norm(X, "rows"));
%! for i=1:4
%!   mesh.elements.joints(i).C = [eye(3), zeros(3, 3)];
%!   mesh.elements.joints(i).nodes = int32(12 + i);
%! endfor
%! E(1) = 210000e6;
%! nu(1) = 0.3;
%! mesh.material_data(1).rho = 7850;

%! E(2) = 70000e6;
%! nu(2) = 0.3;
%! mesh.material_data(2).rho = 2700;

%! for i=1:numel(mesh.material_data)
%!   mesh.material_data(i).C = fem_pre_mat_isotropic(E(i), nu(i));
%! endfor

%! mesh.materials.iso8 = int32([1; 2]);
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.pressure.iso4.elements = int32([1,2,3,4]);
%! load_case.pressure.iso4.p = repmat(p, 1, 4);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M, ...
%!  mat_ass.R, ...
%!  mat_ass.dm, ...
%!  mat_ass.S, ...
%!  mat_ass.J, ...
%!  mat_ass.C1, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS, ...
%!                                       FEM_MAT_MASS, ...
%!                                       FEM_VEC_LOAD_CONSISTENT, ...
%!                                       FEM_SCA_TOT_MASS, ...
%!                                       FEM_VEC_INERTIA_M1, ...
%!                                       FEM_MAT_INERTIA_J, ...
%!                                       FEM_MAT_ACCEL_LOAD], ...
%!                                      load_case);
%! sol_stat = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_eig = fem_sol_modal(mesh, dof_map, mat_ass, num_modes);
%! if (do_plot)
%!   figure("visible", "off");
%!   fem_post_sol_plot(mesh, sol_stat, scale / max(norm(sol_stat.def(:, 1:3), "rows")), 1);
%!   xlabel("x [m]");
%!   ylabel("y [m]");
%!   zlabel("z [m]");
%!   grid on;
%!   grid minor on;
%!   title("static deflection");

%!   for i=1:numel(sol_eig.f)
%!     figure("visible", "off");
%!     fem_post_sol_plot(mesh, sol_eig, scale / max(norm(sol_eig.def(:, 1:3, i), "rows")), i);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("mode %d: %.1fHz", i, sol_eig.f(i)));
%!   endfor
%!   figure_list();
%! endif

%!test
%! ##########################################################################################
%! ## TEST 21: Test case for sfncon4
%! ##########################################################################################
%! close all;
%! p = 1.25e6;
%! a = 15e-3;
%! b = 25e-3;
%! c = 20e-3;
%! d = 50e-3;
%! A = 20e-3;
%! B = 30e-3;
%! C = 40e-3;
%! scale = 10e-3;
%! num_modes = int32(6);
%! do_plot = fem_tests_enable_plotting();
%! X = [-0.5 * a, -0.5 * b, c + C;       #1
%!      0.5 * a, -0.5 * b, c + C;       #2
%!      0.5 * a,  0.5 * b, c + C;       #3
%!      -0.5 * a,  0.5 * b, c + C;       #4
%!      -0.5 * a, -0.5 * b, C;           #5
%!      0.5 * a, -0.5 * b, C;           #6
%!      0.5 * a,  0.5 * b, C;           #7
%!      -0.5 * a,  0.5 * b, C;           #8
%!      -0.5 * A, -0.5 * B, C;           #9
%!      0.5 * A, -0.5 * B, C;          #10
%!      0.5 * A,  0.5 * B, C;          #11
%!      -0.5 * A,  0.5 * B, C;          #12
%!      -0.5 * A, -0.5 * B, 0;          #13
%!      0.5 * A, -0.5 * B, 0;          #14
%!      0.5 * A,  0.5 * B, 0;          #15
%!      -0.5 * A,  0.5 * B, 0;          #16
%!      0,        0, c + C + d]; #17

%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9:16]);
%! mesh.elements.sfncon4.master = int32(9:12);
%! mesh.elements.sfncon4.slave = int32(5:8).';
%! mesh.elements.sfncon4.maxdist = sqrt(eps) * max(norm(X, "rows"));
%! mesh.elements.rbe3.nodes = int32([17, 1:4]);
%! mesh.elements.rbe3.weight = ones(1, 4);
%! for i=1:4
%!   mesh.elements.joints(i).C = [eye(3), zeros(3, 3)];
%!   mesh.elements.joints(i).nodes = int32(12 + i);
%! endfor
%! mesh.elements.joints(end + 1).C = eye(6)([1,2,6],:);
%! mesh.elements.joints(end).nodes = int32(17);
%! E(1) = 210000e6;
%! nu(1) = 0.3;
%! mesh.material_data(1).rho = 7850;

%! E(2) = 70000e6;
%! nu(2) = 0.3;
%! mesh.material_data(2).rho = 2700;

%! for i=1:numel(mesh.material_data)
%!   mesh.material_data(i).C = fem_pre_mat_isotropic(E(i), nu(i));
%! endfor

%! mesh.materials.iso8 = int32([1; 2]);
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.pressure.iso4.elements = int32([1,2,3,4]);
%! load_case.pressure.iso4.p = repmat(p, 1, 4);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M, ...
%!  mat_ass.R, ...
%!  mat_ass.dm, ...
%!  mat_ass.S, ...
%!  mat_ass.J, ...
%!  mat_ass.C1, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS, ...
%!                                       FEM_MAT_MASS, ...
%!                                       FEM_VEC_LOAD_CONSISTENT, ...
%!                                       FEM_SCA_TOT_MASS, ...
%!                                       FEM_VEC_INERTIA_M1, ...
%!                                       FEM_MAT_INERTIA_J, ...
%!                                       FEM_MAT_ACCEL_LOAD], ...
%!                                      load_case);
%! sol_stat = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_eig = fem_sol_modal(mesh, dof_map, mat_ass, num_modes);
%! if (do_plot)
%!   figure("visible", "off");
%!   fem_post_sol_plot(mesh, sol_stat, scale / max(norm(sol_stat.def(:, 1:3), "rows")), 1);
%!   xlabel("x [m]");
%!   ylabel("y [m]");
%!   zlabel("z [m]");
%!   grid on;
%!   grid minor on;
%!   title("static deflection");

%!   for i=1:numel(sol_eig.f)
%!     figure("visible", "off");
%!     fem_post_sol_plot(mesh, sol_eig, scale / max(norm(sol_eig.def(:, 1:3, i), "rows")), i);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("mode %d: %.1fHz", i, sol_eig.f(i)));
%!   endfor
%!   figure_list();
%! endif

%!test
%! ##########################################################################################
%! ## TEST 22: Test case for sfncon4
%! ##########################################################################################
%! close all;
%! Fx = 1250;
%! c = 1e-5;
%! scale = 20e-3;
%! do_plot = fem_tests_enable_plotting();
%! num_modes = 6;
%! material1.E = 210000e6;
%! material1.nu = 0.3;
%! material1.rho = 7850;

%! h1 = 4.5e-3;
%! geometry1.l = 20e-3;
%! geometry1.w = 30e-3;
%! geometry1.h = 50e-3;

%! mesh_size1.num_elem_l = ceil(geometry1.l / h1);
%! mesh_size1.num_elem_w = ceil(geometry1.w / h1);
%! mesh_size1.num_elem_h = ceil(geometry1.h / h1);

%! [data(1).mesh] = fem_pre_mesh_cube_create(geometry1, mesh_size1, material1, zeros(3, 1));
%! data(1).mesh.nodes(:, 2) -= 0.5 * geometry1.w;
%! data(1).mesh.nodes(:, 3) -= 0.5 * geometry1.h;
%! material2.E = material1.E;
%! material2.nu = material1.nu;
%! material2.rho = material1.rho;

%! h2 = 5.5e-3;
%! geometry2.l = 60e-3;
%! geometry2.w = 30e-3;
%! geometry2.h = 50e-3;

%! mesh_size2.num_elem_l = ceil(geometry2.l / h2);
%! mesh_size2.num_elem_w = ceil(geometry2.w / h2);
%! mesh_size2.num_elem_h = ceil(geometry2.h / h2);

%! [data(2).mesh] = fem_pre_mesh_cube_create(geometry2, mesh_size2, material2, zeros(3, 1));
%! data(2).mesh.nodes(:, 1) += geometry1.l + c;
%! data(2).mesh.nodes(:, 2) -= 0.5 * geometry2.w;
%! data(2).mesh.nodes(:, 3) -= 0.5 * geometry2.h;

%! for i=1:numel(data)
%!   data(i).load_case.locked_dof = false(size(data(i).mesh.nodes));
%!   data(i).dof_map = fem_ass_dof_map(data(i).mesh, data(i).load_case);
%! endfor
%! [data(3).mesh, data(3).dof_map] = fem_post_mesh_merge(data);
%! idx_clamp = find(data(3).mesh.nodes(:, 1) == 0);
%! idx_force = find(data(3).mesh.nodes(:, 1) == geometry1.l + geometry2.l + c);
%! idx_master = find(data(3).mesh.nodes(:, 1) == geometry1.l);
%! idx_slave = find(data(3).mesh.nodes(:, 1) == geometry1.l + c);
%! data(3).load_case.locked_dof = false(size(data(3).mesh.nodes));
%! data(3).load_case.locked_dof(idx_clamp, 1:3) = true;
%! data(3).load_case.loaded_nodes = int32(idx_force);
%! data(3).load_case.loads = [repmat(Fx / numel(idx_force), numel(idx_force), 1), zeros(numel(idx_force), 5)];
%! data(3).mesh.elements.sfncon4.slave = int32(idx_slave);
%! data(3).mesh.elements.sfncon4.master = zeros(0, 4, "int32");
%! for i=1:numel(idx_master)
%!   [ielem, inode] = find(data(3).mesh.elements.iso8 == idx_master(i));
%!   data(3).mesh.elements.sfncon4.master(end + (1:numel(ielem)), :) = data(3).mesh.elements.iso8(ielem, [4, 1, 5, 8]);
%! endfor
%! data(3).mesh.elements.sfncon4.maxdist = c * (1 + sqrt(eps));
%! data(3).dof_map = fem_ass_dof_map(data(3).mesh, data(3).load_case);
%! [data(3).mat_ass.K, ...
%!  data(3).mat_ass.M, ...
%!  data(3).mat_ass.R, ...
%!  data(3).mat_ass.dm, ...
%!  data(3).mat_ass.S, ...
%!  data(3).mat_ass.J, ...
%!  data(3).mat_ass.C1, ...
%!  data(3).mat_ass.mat_info, ...
%!  data(3).mat_ass.mesh_info] = fem_ass_matrix(data(3).mesh, ...
%!                                              data(3).dof_map, ...
%!                                              [FEM_MAT_STIFFNESS, ...
%!                                               FEM_MAT_MASS, ...
%!                                               FEM_VEC_LOAD_CONSISTENT, ...
%!                                               FEM_SCA_TOT_MASS, ...
%!                                               FEM_VEC_INERTIA_M1, ...
%!                                               FEM_MAT_INERTIA_J, ...
%!                                               FEM_MAT_ACCEL_LOAD], ...
%!                                              data(3).load_case);
%! data(3).sol_stat = fem_sol_static(data(3).mesh, data(3).dof_map, data(3).mat_ass);
%! data(3).sol_eig = fem_sol_modal(data(3).mesh, data(3).dof_map, data(3).mat_ass, num_modes);
%! if (do_plot)
%!   figure("visible", "off");
%!   fem_post_sol_plot(data(3).mesh, data(3).sol_stat, scale / max(norm(data(3).sol_stat.def(:, 1:3), "rows")), 1);
%!   view(30,30);
%!   xlabel("x [m]");
%!   ylabel("y [m]");
%!   zlabel("z [m]");
%!   grid on;
%!   grid minor on;
%!   title("static deflection");

%!   for i=1:numel(data(3).sol_eig.f)
%!     figure("visible", "off");
%!     fem_post_sol_plot(data(3).mesh, data(3).sol_eig, scale / max(norm(data(3).sol_eig.def(:, 1:3, i), "rows")), i);
%!     view(30,30);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("%d: patched model eigenmode %.1fHz", i, data(3).sol_eig.f(i)));
%!   endfor
%! endif
%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;

%! h = min([h1,h2]);
%! geometry.l = geometry1.l + geometry2.l;
%! geometry.w = mean([geometry1.w, geometry2.w]);
%! geometry.h = mean([geometry1.h, geometry2.h]);

%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, zeros(3,1));
%! mesh.nodes(:, 2) -= 0.5 * geometry.w;
%! mesh.nodes(:, 3) -= 0.5 * geometry.h;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.M, ...
%!  mat_ass.K] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_MASS, ...
%!                               FEM_MAT_STIFFNESS], ...
%!                              load_case);
%! [sol_eig] = fem_sol_modal(mesh, dof_map, mat_ass, num_modes);
%! if (do_plot)
%!   for i=1:length(sol_eig.f)
%!     figure("visible", "off");
%!     hold on;
%!     fem_post_sol_plot(mesh, sol_eig, scale / max(norm(sol_eig.def(:, 1:3, i), "rows")), i);
%!     view(30,30);
%!     xlabel('x [m]');
%!     ylabel('y [m]');
%!     zlabel('z [m]');
%!     grid on;
%!     grid minor on;
%!     title(sprintf("%d. uniform model: eigenmode: %gHz", i, sol_eig.f(i)));
%!   endfor
%!   figure_list();
%! endif

%!test
%! ## TEST 23
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   func={"mldivide", "lu" , "chol", "umfpack", "pastix", "pastix", "mumps", "pardiso"};
%!   classes={@fem_fact, @fem_fact_lu, @fem_fact_chol, @fem_fact_umfpack, @fem_fact_pastix, @fem_fact_pastix_ref, @fem_fact_mumps, @fem_fact_pardiso};
%!   warnfunc = false(size(func));
%!   options.refine_max_iter = int32(100);
%!   options.verbose = int32(0);
%!   for k=1:2
%!     for j=1:numel(func)
%!       for i=1:100
%!         switch (k)
%!           case 1
%!             A = rand(10,10);
%!             M = rand(10, 10);
%!           case 2
%!             A = sprand(100,100,0.05) + 5*diag(rand(100,1));
%!             M = sprand(100,100,0.05) + 5*diag(rand(100,1));
%!         endswitch
%!         A *= A.';
%!         M *= M.';
%!         Q = symrcm(A);
%!         A = A(Q, Q);
%!         M = M(Q, Q);
%!         b = rand(columns(A), 5);
%!         if (~fem_sol_check_func(func{j}))
%!           if (~warnfunc(j))
%!             warning("function \"%s\" not found", func{j});
%!             warnfunc(j) = true;
%!           endif
%!           continue;
%!         endif
%!         Afact = feval(classes{j}, A, options);
%!         x1 = A \ b;
%!         x2 = Afact \ b;
%!         tol = eps^0.4;
%!         assert(x2, x1, tol * norm(x1));
%!         assert(A * x2, b, tol * norm(A*x2 + b));
%!       endfor
%!     endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 24
%! close all;
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! rho = 7850;
%! Fx = 1;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;
%!       0,  0.5 * b,  0.5 * c;
%!       0, -0.5 * b,  0.5 * c;
%!       0.5 * a, -0.5 * b,  0.5 * c;
%!       0.5 * a,  0.5 * b, -0.5 * c;
%!       0,  0.5 * b, -0.5 * c;
%!       0, -0.5 * b, -0.5 * c;
%!       0.5 * a, -0.5 * b, -0.5 * c,
%!       a,  0.5 * b,  0.5 * c;
%!       a, -0.5 * b,  0.5 * c;
%!       a,  0.5 * b, -0.5 * c;
%!       a, -0.5 * b, -0.5 * c];
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9, 1, 4, 10, 11, 5, 8, 12]);
%! mesh.materials.iso8 = int32([1; 1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! load_case.locked_dof(find(X(:, 1) == 0), 1) = true;
%! load_case.locked_dof(find(X(:, 2) == -0.5 * b), 2) = true;
%! load_case.locked_dof(find(X(:, 3) == -0.5 * c), 3) = true;
%! load_case.loaded_nodes = int32([9:12]).';
%! load_case.loads = [repmat(Fx / 4, 4, 1), zeros(4, 5)];
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.R, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS, ...
%!                                       FEM_VEC_LOAD_CONSISTENT], ...
%!                                      load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! tauxx_a = Fx / (b * c);
%! assert(all(abs(sol_stat.stress.tau.iso8(:, :, 1) / tauxx_a - 1) < sqrt(eps)));
%! assert(all(abs(sol_stat.stress.tau.iso8(:, :, 2:end) / tauxx_a) < sqrt(eps)));

%!test
%! ## TEST 25
%! close all;
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! rho = 7850;
%! Fy = 1;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       0,  0.5 * b,  0.5 * c;  #  2
%!       0, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       0,  0.5 * b, -0.5 * c;  #  6
%!       0, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c,  #  8
%!       a,  0.5 * b,  0.5 * c;  #  9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c]; # 12
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9, 1, 4, 10, 11, 5, 8, 12]);
%! mesh.materials.iso8 = int32([1; 1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! load_case.locked_dof(find(X(:, 1) == 0), 1) = true;
%! load_case.locked_dof(find(X(:, 2) == -0.5 * b), 2) = true;
%! load_case.locked_dof(find(X(:, 3) == -0.5 * c), 3) = true;
%! load_case.pressure.iso4.elements = int32([6, 5, 1, 2; ...
%!                                           5, 11, 9, 1]);
%! load_case.pressure.iso4.p = repmat(Fy / (a * c), 2, 4);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.R, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS, ...
%!                                       FEM_VEC_LOAD_CONSISTENT], ...
%!                                      load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! tauyy_a = Fy / (a * c);
%! assert(all(abs(sol_stat.stress.tau.iso8(:, :, 2) / tauyy_a - 1) < sqrt(eps)));
%! assert(all(abs(sol_stat.stress.tau.iso8(:, :, [1,3:end]) / tauyy_a) < sqrt(eps)));

%!test
%! ## TEST 26
%! close all;
%! a = 70e-3;
%! b = 20e-3;
%! c = 10e-3;
%! rho = 7850;
%! Fz = 1;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       0,  0.5 * b,  0.5 * c;  #  2
%!       0, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       0,  0.5 * b, -0.5 * c;  #  6
%!       0, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c,  #  8
%!       a,  0.5 * b,  0.5 * c;  #  9
%!       a, -0.5 * b,  0.5 * c;  # 10
%!       a,  0.5 * b, -0.5 * c;  # 11
%!       a, -0.5 * b, -0.5 * c]; # 12
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8;
%!                             9, 1, 4, 10, 11, 5, 8, 12]);
%! mesh.materials.iso8 = int32([1; 1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! load_case.locked_dof(find(X(:, 1) == 0), 1) = true;
%! load_case.locked_dof(find(X(:, 2) == -0.5 * b), 2) = true;
%! load_case.locked_dof(find(X(:, 3) == -0.5 * c), 3) = true;
%! load_case.pressure.iso4.elements = int32([4, 3, 2, 1; ...
%!                                           10, 4, 1, 9]);
%! load_case.pressure.iso4.p = repmat(Fz / (a * b), 2, 4);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.R, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS, ...
%!                                       FEM_VEC_LOAD_CONSISTENT], ...
%!                                      load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! tauzz_a = Fz / (a * b);
%! assert(all(abs(sol_stat.stress.tau.iso8(:, :, 3) / tauzz_a - 1) < sqrt(eps)));
%! assert(all(abs(sol_stat.stress.tau.iso8(:, :, [1:2, 4:end]) / tauzz_a) < sqrt(eps)));


%!test
%! ## TEST 27
%! close all;
%! a = 20e-3;
%! b = 20e-3;
%! c = 20e-3;
%! ux = 7e-3;
%! rho = 7850;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       -0.5 * a,  0.5 * b,  0.5 * c;  #  2
%!       -0.5 * a, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       -0.5 * a,  0.5 * b, -0.5 * c;  #  6
%!       -0.5 * a, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c]; #  8
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8]);
%! mesh.materials.iso8 = int32([1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS], ...
%!                                      load_case);
%! sol_stat.def = zeros(size(mesh.nodes));
%! sol_stat.def(1:4, 1) = ux;
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! G = E / (2 * (1 + nu));
%! gamma = ux / c;
%! tauzx_a = G * gamma;
%! assert(all(abs(sol_stat.stress.tau.iso8(:,:,6) / tauzx_a - 1) < sqrt(eps) * abs(tauzx_a)));


%!test
%! ## TEST 28
%! close all;
%! a = 20e-3;
%! b = 20e-3;
%! c = 20e-3;
%! uy = 7e-3;
%! rho = 7850;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       -0.5 * a,  0.5 * b,  0.5 * c;  #  2
%!       -0.5 * a, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       -0.5 * a,  0.5 * b, -0.5 * c;  #  6
%!       -0.5 * a, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c]; #  8
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8]);
%! mesh.materials.iso8 = int32([1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS], ...
%!                                      load_case);
%! sol_stat.def = zeros(size(mesh.nodes));
%! sol_stat.def(1:4, 2) = uy;
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! G = E / (2 * (1 + nu));
%! gamma = uy / c;
%! tauyz_a = G * gamma;
%! assert(all(abs(sol_stat.stress.tau.iso8(:,:,6) / tauyz_a - 1) < sqrt(eps) * abs(tauyz_a)));

%!test
%! ## TEST 29
%! close all;
%! a = 20e-3;
%! b = 20e-3;
%! c = 20e-3;
%! uy = 7e-3;
%! rho = 7850;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       -0.5 * a,  0.5 * b,  0.5 * c;  #  2
%!       -0.5 * a, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       -0.5 * a,  0.5 * b, -0.5 * c;  #  6
%!       -0.5 * a, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c]; #  8
%! mesh.nodes = [X, zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8]);
%! mesh.materials.iso8 = int32([1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS], ...
%!                                      load_case);
%! sol_stat.def = zeros(size(mesh.nodes));
%! sol_stat.def([1,4,5,8], 2) = uy;
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! G = E / (2 * (1 + nu));
%! gamma = uy / a;
%! tauxy_a = G * gamma;
%! assert(all(abs(sol_stat.stress.tau.iso8(:,:,6) / tauxy_a - 1) < sqrt(eps) * abs(tauxy_a)));


%!test
%! ## TEST 30
%! close all;
%! a = 40e-3;
%! b = 10e-3;
%! c = 30e-3;
%! ux = -3e-3;
%! uy = 5e-3;
%! uz = 7e-3;
%! epsilonxx = ux / a;
%! epsilonyy = 2 * uy / b;
%! epsilonzz = -2 * uz / c;
%! epsilonxy = uy / a;
%! epsilonyz = 0;
%! epsilonzx = uz / a;
%! epsilon_a = [epsilonxx,  epsilonxx,  epsilonxx,  epsilonxx,  epsilonxx,  epsilonxx,  epsilonxx,  epsilonxx,
%!              epsilonyy,          0,          0,  epsilonyy,  epsilonyy,          0,          0,  epsilonyy,
%!              epsilonzz,          0,          0,  epsilonzz,  epsilonzz,          0,          0,  epsilonzz,
%!              epsilonxy,  epsilonxy, -epsilonxy, -epsilonxy,  epsilonxy,  epsilonxy, -epsilonxy, -epsilonxy,
%!              epsilonyz,  epsilonyz,  epsilonyz,  epsilonyz,  epsilonyz,  epsilonyz,  epsilonyz,  epsilonyz,
%!              -epsilonzx, -epsilonzx, -epsilonzx, -epsilonzx,  epsilonzx,  epsilonzx,  epsilonzx,  epsilonzx];
%! rho = 7850;
%! X = [ 0.5 * a,  0.5 * b,  0.5 * c;  #  1
%!       -0.5 * a,  0.5 * b,  0.5 * c;  #  2
%!       -0.5 * a, -0.5 * b,  0.5 * c;  #  3
%!       0.5 * a, -0.5 * b,  0.5 * c;  #  4
%!       0.5 * a,  0.5 * b, -0.5 * c;  #  5
%!       -0.5 * a,  0.5 * b, -0.5 * c;  #  6
%!       -0.5 * a, -0.5 * b, -0.5 * c;  #  7
%!       0.5 * a, -0.5 * b, -0.5 * c]; #  8
%! R = euler123_to_rotation_matrix([25; 30; 45]*pi/180);
%! mesh.nodes = [X * R.', zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8]);
%! mesh.materials.iso8 = int32([1]);
%! E = 210000e6;
%! nu = 0.3;
%! mesh.material_data.rho = rho;
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! dof_map = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.mat_info, ...
%!  mat_ass.mesh_info] = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      [FEM_MAT_STIFFNESS], ...
%!                                      load_case);
%! U = zeros(rows(mesh.nodes), 3);
%! U(1, 1:3) = [ux, uy, -uz];
%! U(4, 1:3) = [ux, -uy, -uz];
%! U(5, 1:3) = [ux, uy, uz];
%! U(8, 1:3) = [ux, -uy, uz];
%! sol_stat.def = [U * R.', zeros(rows(mesh.nodes), 3)];
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! tau_a = mesh.material_data.C * epsilon_a;
%! idx = [1, 4, 6;
%!        4, 2, 5;
%!        6, 5, 3];

%! for i=1:columns(tau_a)
%!   tau_a_tens = R * tau_a(:, i)(idx) * R.';
%!   tau_a(:, i) = [tau_a_tens(1, 1);
%!                  tau_a_tens(2, 2);
%!                  tau_a_tens(3, 3);
%!                  tau_a_tens(1, 2);
%!                  tau_a_tens(2, 3);
%!                  tau_a_tens(1, 3)];
%! endfor
%! for i=1:columns(tau_a)
%!   assert(tau_a(:, i), sol_stat.stress.tau.iso8(1, i, :)(:), sqrt(eps) * norm(tau_a(:, i)));
%! endfor

%!test
%! close all;
%! ## TEST 31
%! ###############################################
%! ## Stress and strain of 10 node tetrahedrons
%! ###############################################
%! a = 10e-3;
%! b = 20e-3;
%! c = 7e-3;
%! u = [2e-3;  5e-3;  3e-3];
%! l = [a; b; c];
%! x0 = [5e-3, -8e-3, -17e-3];
%! v0 = [13e-3, -16e-3, 20e-3];
%! xi =         [      0,       0,       0;
%!                     a,       0,       0;
%!                     0,       b,       0;
%!                     0,       0,       c;
%!                     0.5 * a,       0,       0;
%!                     0.5 * a, 0.5 * b,       0;
%!                     0, 0.5 * b,       0;
%!                     0,       0, 0.5 * c;
%!                     0.5 * a,       0, 0.5 * c;
%!                     0, 0.5 * b, 0.5 * c];
%! rand("seed", 0);
%! Phi = rand(3, 5) * pi / 180;
%! for r=1:columns(Phi)
%!   R = euler123_to_rotation_matrix(Phi(:, r));
%!   assert(R*R.', eye(3), eps^0.8);
%!   assert(R.'*R, eye(3), eps^0.8);
%!   data(r).mesh.nodes = [xi * R.' + x0, zeros(rows(xi), 3)];
%!   data(r).mesh.elements.tet10 = int32(1:10);
%!   data(r).mesh.materials.tet10 = int32(1);
%!   E = 210000e6;
%!   nu = 0.3;
%!   data(r).mesh.material_data.rho = 1;
%!   data(r).mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!   data(r).load_case.locked_dof = false(rows(data(r).mesh.nodes), 6);
%!   [data(r).dof_map] = fem_ass_dof_map(data(r).mesh, data(r).load_case);
%!   data(r).sol_stat.def = zeros(rows(xi), 6, numel(l) * numel(u));
%!   for j=1:numel(l)
%!     for i=1:numel(u)
%!       v = u(i) * xi(:, j) / l(j);
%!       V = zeros(rows(v), 3);
%!       V(:, i) = v;
%!       V += v0;
%!       V *= R.';
%!       data(r).sol_stat.def(:, 1:3, (j - 1) * numel(u) + i) = V;
%!     endfor
%!   endfor
%!   [data(r).sol_stat.stress] = fem_ass_matrix(data(r).mesh, ...
%!                                              data(r).dof_map, ...
%!                                              [FEM_VEC_STRESS_CAUCH], ...
%!                                              data(r).load_case, ...
%!                                              data(r).sol_stat);
%!   idx = [1, 4, 6;
%!          4, 2, 5;
%!          6, 5, 3];

%!   for i=1:numel(u)
%!     for j=1:numel(l)
%!       Epsilon_a_0 = zeros(3, 3);
%!       Epsilon_a_0(i, j) = u(i) / l(j);
%!       if (i ~= j)
%!         Epsilon_a_0(i, j) /= 2;
%!         Epsilon_a_0(j, i) = Epsilon_a_0(i, j);
%!       endif
%!       Epsilon_a = R * Epsilon_a_0 * R.';
%!       epsilon_a = [Epsilon_a(1, 1);
%!                    Epsilon_a(2, 2);
%!                    Epsilon_a(3, 3);
%!                    2 * Epsilon_a(1, 2);
%!                    2 * Epsilon_a(2, 3);
%!                    2 * Epsilon_a(3, 1)];
%!       epsilon_a_0 = [Epsilon_a_0(1, 1);
%!                      Epsilon_a_0(2, 2);
%!                      Epsilon_a_0(3, 3);
%!                      2 * Epsilon_a_0(1, 2);
%!                      2 * Epsilon_a_0(2, 3);
%!                      2 * Epsilon_a_0(3, 1)];
%!       tau_a_0 = data(r).mesh.material_data.C * epsilon_a_0;
%!       Tau_a = R * tau_a_0(idx) * R.';
%!       tau_a = [Tau_a(1, 1);
%!                Tau_a(2, 2);
%!                Tau_a(3, 3);
%!                Tau_a(1, 2);
%!                Tau_a(2, 3);
%!                Tau_a(3, 1)];
%!       for n=1:size(data(r).sol_stat.stress.tau.tet10, 2)
%!         for k=1:size(data(r).sol_stat.stress.tau.tet10, 1)
%!           tau = data(r).sol_stat.stress.tau.tet10(k, n, :, (j - 1) * numel(u) + i)(:);
%!           Tau_0 = R.' * tau(idx) * R;
%!           tau_0 = [Tau_0(1, 1);
%!                    Tau_0(2, 2);
%!                    Tau_0(3, 3);
%!                    Tau_0(1, 2);
%!                    Tau_0(2, 3);
%!                    Tau_0(3, 1)];
%!           epsilon_0 = data(r).mesh.material_data.C \ tau_0;
%!           epsilon = data(r).mesh.material_data.C \ tau;
%!           tau_eps_a = data(r).mesh.material_data.C * epsilon_a;
%!           assert(tau, tau_a,  max(abs(tau_a)) * (eps)^0.75);
%!           assert(tau, tau_eps_a,  max(abs(tau_eps_a)) * (eps)^0.75);
%!           assert(tau_0, tau_a_0,  max(abs(tau_a_0)) * (eps)^0.75);
%!           assert(epsilon_0, epsilon_a_0,  max(abs(epsilon_a_0)) * (eps)^0.75);
%!           assert(epsilon, epsilon_a,  max(abs(epsilon_a)) * (eps)^0.75);
%!         endfor
%!       endfor
%!     endfor
%!   endfor
%! endfor

%!test
%! ## TEST 32
%! close all;
%! SI_unit_m = 1e-3;
%! SI_unit_kg = 1e3;
%! SI_unit_s = 1;
%! SI_unit_N = SI_unit_kg * SI_unit_m / SI_unit_s^2;
%! SI_unit_Pa = SI_unit_N / SI_unit_m^2;

%! R = euler123_to_rotation_matrix([30; 40; 70]*pi/180);

%! a = 15e-3 / SI_unit_m;
%! b = 25e-3 / SI_unit_m;
%! c = 18e-3 / SI_unit_m;
%! ux = 12e-3 / SI_unit_m;

%! X = [ a,  0.7 * b,  0.5 * c;  ## 1
%!       0,  0.7 * b,  0.5 * c;  ## 2
%!       0, -0.7 * b,  0.5 * c;  ## 3
%!       a, -0.7 * b,  0.5 * c;  ## 4
%!       a,  0.3 * b, -0.5 * c;  ## 5
%!       0,  0.3 * b, -0.5 * c;  ## 6
%!       0, -0.3 * b, -0.5 * c;  ## 7
%!       a, -0.3 * b, -0.5 * c]; ## 8

%! mesh.nodes = [X * R.', zeros(rows(X), 3)];
%! mesh.elements.iso8 = int32([1:8]);
%! mesh.materials.iso8 = int32([1]);
%! E = 210000e6 / (SI_unit_N / SI_unit_m^2);
%! nu = 0.3;
%! mesh.material_data.rho = 7850 / (SI_unit_kg / SI_unit_m^3);
%! mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%! load_case.locked_dof = false(rows(mesh.nodes), 6);
%! dof_map = fem_ass_dof_map(mesh, load_case);

%! sol_stat.def = zeros(rows(mesh.nodes), 6);
%! sol_stat.def([1,4,6,7], 1) = 0.5 * ux;
%! sol_stat.def([2,3,5,8], 1) = -0.5 * ux;
%! for i=1:rows(sol_stat.def)
%!   sol_stat.def(i, 1:3) *= R.';
%! endfor
%! epsilonxx_a = ux / a;
%! epsilonxz_a = ux / c;
%! epsilon_a = [epsilonxx_a, epsilonxx_a, -epsilonxx_a, -epsilonxx_a;
%!              zeros(4, 4);
%!              epsilonxz_a, -epsilonxz_a, epsilonxz_a, -epsilonxz_a];
%! tau_a = mesh.material_data.C * epsilon_a;
%! idx = [1, 4, 6;
%!        4, 2, 5;
%!        6, 5, 3];
%! tau_a_0 = zeros(size(tau_a));
%! for i=1:columns(tau_a)
%!   Tau_a_0 = R * tau_a(:, i)(idx) * R.';
%!   tau_a_0(:, i) = [Tau_a_0(1, 1);
%!                    Tau_a_0(2, 2);
%!                    Tau_a_0(3, 3);
%!                    Tau_a_0(1, 2);
%!                    Tau_a_0(2, 3);
%!                    Tau_a_0(3, 1)];
%! endfor
%! [sol_stat.stress] = fem_ass_matrix(mesh, ...
%!                                    dof_map, ...
%!                                    [FEM_VEC_STRESS_CAUCH], ...
%!                                    load_case, ...
%!                                    sol_stat);
%! tau = sol_stat.stress.tau.iso8;
%! tol = sqrt(eps) * norm(tau_a);
%! assert(tau(1, 1, :)(:), tau_a_0(:, 1), tol);
%! assert(tau(1, 4, :)(:), tau_a_0(:, 1), tol);
%! assert(tau(1, 2, :)(:), tau_a_0(:, 2), tol);
%! assert(tau(1, 3, :)(:), tau_a_0(:, 2), tol);
%! assert(tau(1, 5, :)(:), tau_a_0(:, 3), tol);
%! assert(tau(1, 8, :)(:), tau_a_0(:, 3), tol);
%! assert(tau(1, 6, :)(:), tau_a_0(:, 4), tol);
%! assert(tau(1, 7, :)(:), tau_a_0(:, 4), tol);

%!test
%! ## TEST 33
%! close all;
%! scale_stat = 1;

%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;
%! material.alpha = 1e-10;
%! material.beta = 1e-8;
%! h = 5e-3;
%! geometry.l = 1000e-3;
%! geometry.w = 5e-3;
%! geometry.h = 50e-3;
%! g = [0; 0; -9.81];
%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! do_plot = fem_tests_enable_plotting();
%! options = struct();
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, zeros(3,1));
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, mat_ass.C1] = fem_ass_matrix(mesh, ...
%!                                          dof_map, ...
%!                                          [FEM_MAT_STIFFNESS, ...
%!                                           FEM_MAT_ACCEL_LOAD], ...
%!                                          load_case);
%! mat_ass.R = mat_ass.C1 * g;
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);

%! idx_itf = find(mesh.nodes(:, 1) == geometry.l);
%! mesh_cms = mesh;
%! cms_opt.nodes.interfaces.number = rows(mesh_cms.nodes) + 1;
%! cms_opt.nodes.modal.number = rows(mesh_cms.nodes) + 2;
%! mesh_cms.nodes(cms_opt.nodes.interfaces.number, 1:3) = [geometry.l + 0.05, 0.5 * geometry.w, 0.5 * geometry.h];
%! mesh_cms.nodes(cms_opt.nodes.modal.number, 1:3) = [-0.05, 0.5 * geometry.w, 0.5 * geometry.h];
%! mesh_cms.elements.rbe3(1).nodes = [cms_opt.nodes.interfaces.number, idx_itf.'];
%! mesh_cms.elements.rbe3(1).weight = ones(1, numel(idx_itf));
%! load_case_cms.locked_dof = false(rows(mesh_cms.nodes), 6);
%! load_case_cms.locked_dof(cms_opt.nodes.modal.number, 1:6) = true;
%! load_case_cms.locked_dof(find(mesh_cms.nodes(:, 1) == 0), 1:3) = true;
%! cms_opt.verbose = false;
%! cms_opt.modes.number = int32(30);
%! cms_opt.number_of_threads = 1;
%! cms_opt.algorithm = "shift-invert";
%! cms_opt.scaling = "mean K,M";
%! cms_opt.invariants = true;
%! cms_opt.refine_max_iter = int32(30);
%! [mesh_cms, mat_ass_cms, dof_map_cms, sol_eig_cms] = fem_cms_create(mesh_cms, load_case_cms, cms_opt);
%! Dred = mat_ass_cms.Mred * material.alpha + mat_ass_cms.Kred * material.beta;
%! assert(mat_ass_cms.Dred, Dred, sqrt(eps) * max(max(abs(Dred))));
%! mat_ass_cms.Rred = mat_ass_cms.Inv3.' * g;
%! Ured = mat_ass_cms.Kred \ mat_ass_cms.Rred;
%! sol_cms.def = fem_post_def_nodal(mesh_cms, dof_map_cms, mat_ass_cms.Tred * Ured);
%! w = geometry.w;
%! h = geometry.h;
%! l = geometry.l;
%! rho = material.rho;
%! A = w * h;
%! Iy = w * h^3 / 12;
%! qz = rho * A * g(3);
%! z = l - mesh.nodes(:, 1);
%! wz = qz * l^4 / (24 * material.E * Iy) * (3 - 4 * z / l + (z / l).^4);
%! tol = 1e-2;
%! if (do_plot)
%!   figure("visible","off");
%!   hold on;
%!   fem_post_sol_plot(mesh, sol_stat, scale_stat);
%!   view(30,30);
%!   xlabel('x [m]');
%!   ylabel('y [m]');
%!   zlabel('z [m]');
%!   grid on;
%!   grid minor on;
%!   title('deformed mesh');
%!   figure_list();
%! endif
%! assert(sol_stat.def(:, 3), wz, tol * max(abs(wz)));
%! assert(sol_cms.def(1:rows(mesh.nodes), 3), wz, tol * max(abs(wz)));

%!test
%! ##########################################################################################
%! ## TEST 34: Test case for sfncon4 using joints
%! ##########################################################################################
%! close all;
%! Fx = 1250;
%! c = 1e-6;
%! scale = 20e-3;
%! num_modes = 6;
%! material1.E = 210000e6;
%! material1.nu = 0.3;
%! material1.rho = 7850;
%! if (exist("fem_tests_enable_plotting"))
%!   contour_plot = do_plot = fem_tests_enable_plotting();
%! else
%!   contour_plot = do_plot = false;
%! endif
%! h1 = 5e-3;
%! geometry1.l = 20e-3;
%! geometry1.w = 30e-3;
%! geometry1.h = 50e-3;

%! mesh_size1.num_elem_l = ceil(geometry1.l / h1);
%! mesh_size1.num_elem_w = ceil(geometry1.w / h1);
%! mesh_size1.num_elem_h = ceil(geometry1.h / h1);

%! [data(1).mesh] = fem_pre_mesh_cube_create(geometry1, mesh_size1, material1, zeros(3, 1));
%! data(1).mesh.nodes(:, 2) -= 0.5 * geometry1.w;
%! data(1).mesh.nodes(:, 3) -= 0.5 * geometry1.h;
%! material2.E = material1.E;
%! material2.nu = material1.nu;
%! material2.rho = material1.rho;

%! h2 = 2.5e-3;
%! geometry2.l = 20e-3;
%! geometry2.w = 30e-3;
%! geometry2.h = 50e-3;

%! mesh_size2.num_elem_l = ceil(geometry2.l / h2);
%! mesh_size2.num_elem_w = ceil(geometry2.w / h2);
%! mesh_size2.num_elem_h = ceil(geometry2.h / h2);

%! [data(2).mesh] = fem_pre_mesh_cube_create(geometry2, mesh_size2, material2, zeros(3, 1));
%! data(2).mesh.nodes(:, 1) += geometry1.l + c;
%! data(2).mesh.nodes(:, 2) -= 0.5 * geometry2.w;
%! data(2).mesh.nodes(:, 3) -= 0.5 * geometry2.h;

%! for i=1:numel(data)
%!   data(i).load_case.locked_dof = false(size(data(i).mesh.nodes));
%!   data(i).dof_map = fem_ass_dof_map(data(i).mesh, data(i).load_case);
%! endfor
%! [data(3).mesh, data(3).dof_map] = fem_post_mesh_merge(data);
%! idx_clamp = find(data(3).mesh.nodes(:, 1) == 0);
%! idx_force = find(data(3).mesh.nodes(:, 1) == geometry1.l + geometry2.l + c);
%! idx_master = find(data(3).mesh.nodes(:, 1) == geometry1.l);
%! idx_slave = find(data(3).mesh.nodes(:, 1) == geometry1.l + c);
%! data(3).load_case.locked_dof = false(size(data(3).mesh.nodes));
%! data(3).load_case.locked_dof(idx_clamp, 1:3) = true;
%! data(3).load_case.loaded_nodes = int32(idx_force);
%! data(3).load_case.loads = [repmat(Fx / numel(idx_force), numel(idx_force), 1), zeros(numel(idx_force), 5)];
%! elements.sfncon4.slave = int32(idx_slave);
%! elements.sfncon4.master = zeros(0, 4, "int32");
%! for i=1:numel(idx_master)
%!   [ielem, inode] = find(data(3).mesh.elements.iso8 == idx_master(i));
%!   elements.sfncon4.master(end + (1:numel(ielem)), :) = data(3).mesh.elements.iso8(ielem, [4, 1, 5, 8]);
%! endfor
%! elements.sfncon4.maxdist = c * (1 + sqrt(eps));
%! data(3).mesh.elements.joints = fem_pre_mesh_constr_surf_to_node(data(3).mesh.nodes, elements);
%! data(3).dof_map = fem_ass_dof_map(data(3).mesh, data(3).load_case);
%! [data(3).mat_ass.K, ...
%!  data(3).mat_ass.M, ...
%!  data(3).mat_ass.R, ...
%!  data(3).mat_ass.dm, ...
%!  data(3).mat_ass.S, ...
%!  data(3).mat_ass.J, ...
%!  data(3).mat_ass.C1, ...
%!  data(3).mat_ass.mat_info, ...
%!  data(3).mat_ass.mesh_info] = fem_ass_matrix(data(3).mesh, ...
%!                                              data(3).dof_map, ...
%!                                              [FEM_MAT_STIFFNESS, ...
%!                                               FEM_MAT_MASS, ...
%!                                               FEM_VEC_LOAD_CONSISTENT, ...
%!                                               FEM_SCA_TOT_MASS, ...
%!                                               FEM_VEC_INERTIA_M1, ...
%!                                               FEM_MAT_INERTIA_J, ...
%!                                               FEM_MAT_ACCEL_LOAD], ...
%!                                              data(3).load_case);
%! data(3).sol_stat = fem_sol_static(data(3).mesh, data(3).dof_map, data(3).mat_ass);
%! data(3).sol_eig = fem_sol_modal(data(3).mesh, data(3).dof_map, data(3).mat_ass, num_modes);

%! data(3).sol_eig.stress = fem_ass_matrix(data(3).mesh, ...
%!                                         data(3).dof_map, ...
%!                                         [FEM_SCA_STRESS_VMIS], ...
%!                                         data(3).load_case, ...
%!                                         data(3).sol_eig);
%! if (do_plot)
%!   figure("visible", "off");
%!   fem_post_sol_plot(data(3).mesh, data(3).sol_stat, scale / max(norm(data(3).sol_stat.def(:, 1:3), "rows")), 1);
%!   view(30,30);
%!   xlabel("x [m]");
%!   ylabel("y [m]");
%!   zlabel("z [m]");
%!   grid on;
%!   grid minor on;
%!   title("static deflection");

%!   for i=1:numel(data(3).sol_eig.f)
%!     figure("visible", "off");
%!     fem_post_sol_plot(data(3).mesh, data(3).sol_eig, scale / max(norm(data(3).sol_eig.def(:, 1:3, i), "rows")), i);
%!     view(30,30);
%!     xlabel("x [m]");
%!     ylabel("y [m]");
%!     zlabel("z [m]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("%d: patched model eigenmode %.1fHz", i, data(3).sol_eig.f(i)));
%!   endfor
%! endif
%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;

%! h = min([h1,h2]);
%! geometry.l = geometry1.l + geometry2.l;
%! geometry.w = mean([geometry1.w, geometry2.w]);
%! geometry.h = mean([geometry1.h, geometry2.h]);

%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, zeros(3,1));
%! mesh.nodes(:, 2) -= 0.5 * geometry.w;
%! mesh.nodes(:, 3) -= 0.5 * geometry.h;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.M, ...
%!  mat_ass.K] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_MASS, ...
%!                               FEM_MAT_STIFFNESS], ...
%!                              load_case);
%! [sol_eig] = fem_sol_modal(mesh, dof_map, mat_ass, num_modes);

%! sol_eig.stress = fem_ass_matrix(mesh, ...
%!                                 dof_map, ...
%!                                 [FEM_SCA_STRESS_VMIS], ...
%!                                 load_case, ...
%!                                 sol_eig);
%! if (do_plot)
%!   for i=1:length(sol_eig.f)
%!     figure("visible", "off");
%!     hold on;
%!     fem_post_sol_plot(mesh, sol_eig, scale / max(norm(sol_eig.def(:, 1:3, i), "rows")), i);
%!     view(30,30);
%!     xlabel('x [m]');
%!     ylabel('y [m]');
%!     zlabel('z [m]');
%!     grid on;
%!     grid minor on;
%!     title(sprintf("%d. uniform model: eigenmode: %gHz", i, sol_eig.f(i)));
%!   endfor
%! endif
%! if (contour_plot)
%!   for i=1:size(sol_eig.stress.vmis.iso8,3)
%!     figure("visible", "off");
%!     subplot(2, 1, 1);
%!     xi = mesh.nodes(mesh.elements.iso8,1);
%!     yi = mesh.nodes(mesh.elements.iso8,2);
%!     zi = mesh.nodes(mesh.elements.iso8,3);
%!     taui = sol_eig.stress.vmis.iso8(:,:,i)(:);
%!     x = linspace (min(xi), max(xi), 100);
%!     y = linspace(min(yi),max(yi),100);
%!     z = max(zi);
%!     tau = griddata3(xi, yi, zi, taui, x, y, z);
%!     contourf(x, y, tau);
%!     colormap("jet");
%!     grid minor on;
%!     colorbar;
%!     title(sprintf("continuous model mode %d", i));
%!     xi = data(3).mesh.nodes(data(3).mesh.elements.iso8, 1);
%!     yi = data(3).mesh.nodes(data(3).mesh.elements.iso8, 2);
%!     zi = data(3).mesh.nodes(data(3).mesh.elements.iso8, 3);
%!     x = linspace(min(xi), max(xi), 100);
%!     y = linspace(min(yi), max(yi), 100);
%!     z = max(zi);
%!     taui = data(3).sol_eig.stress.vmis.iso8(:,:,i)(:);
%!     tau = griddata3(xi,yi,zi,taui, x, y, z);
%!     subplot(2, 1, 2);
%!     contourf(x, y, tau);
%!     colormap("jet");
%!     grid minor on;
%!     colorbar;
%!     title(sprintf("patched model mode %d", i));
%!   endfor
%! endif
%! if (do_plot || contour_plot)
%!   figure_list();
%! endif

%!test
%! ## TEST 35
%! ## Cantilever beam with rectangular cross section and lateral load
%! ## W.Beitz, K.-H.Grothe, 1997, Dubbel, section 2.4.6, page C17, figure 23
%! close all;
%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;
%! Fz = -15000;
%! h = 0.5e-3;
%! geometry.l = 150e-3;
%! geometry.w = h;
%! geometry.h = 15e-3;
%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! f = [ 0; 0; Fz ];
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, f);
%! mesh.nodes(:, 3) -= 0.5 * geometry.h;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! x = linspace(0, geometry.l, 100);
%! z = linspace(-0.5 * geometry.h, 0.5 * geometry.h, 50);
%! [xx, zz] = meshgrid(x, z);
%! xtauel = mesh.nodes(:, 1)(mesh.elements.iso8);
%! ytauel = mesh.nodes(:, 1)(mesh.elements.iso8);
%! ztauel = mesh.nodes(:, 3)(mesh.elements.iso8);
%! tauxxel = sol_stat.stress.taum.iso8(:, :, 1);
%! tauxzel = sol_stat.stress.taum.iso8(:, :, 6);
%! tauxx = griddata(xtauel(:), ztauel(:), tauxxel(:), xx, zz);
%! tauxz = griddata(xtauel(:), ztauel(:), tauxzel(:), xx, zz);
%! Iy = geometry.w * geometry.h^3 / 12;
%! tauxx_a = -Fz / Iy * (geometry.l - xx) .* zz;
%! tauxz_a = 3 / 2 * Fz / (geometry.h * geometry.w) * (1 - (zz / (0.5 * geometry.h)).^2);
%! idx_x = find((xx(:) > 0.1 * geometry.l) & (xx(:) < 0.9 * geometry.l));
%! assert(tauxx(:)(idx_x), tauxx_a(:)(idx_x), 1e-2 * max(tauxx_a(:)(idx_x)));
%! assert(tauxz(:)(idx_x), tauxz_a(:)(idx_x), 7e-2 * max(abs(tauxz_a(:)(idx_x))));

%!test
%! ## TEST 36
%! state = rand("state");
%! unwind_protect
%! rand("seed", 0);
%! for i=1:30
%! for L = 0.1:100:1000
%! w = 10;
%! h = 50;
%! c2 = 0.291;
%! f2 = -1.25;
%! E = 210000;
%! nu = 0.3;
%! G = E / (2 * (1 + nu));
%! rho = 7850e-12;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! U1 = zeros(3, 1);
%! Phi1 = zeros(3, 1);
%! U2 = [0; 0; f2 * L^3 / (3 * E * Iy) + f2 * L / (G * Ay)];
%! Phi2 = [0; -f2 * L^2 / (2 * E * Iy); 0];
%! R = euler123_to_rotation_matrix(2 * pi * rand(3, 1));
%! Uref = [(R * U1).', (R * Phi1).';
%!         (R * U2).', (R * Phi2).'];
%! X1 = zeros(3, 1);
%! X2 = [L; 0; 0];
%! F2 = [0; 0; f2];
%! mesh.nodes = [(R * X1).', zeros(1,3);
%!               (R * X2).',  zeros(1, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1);
%! if (mod(i, 2))
%!   mesh.elements.beam2.nodes = int32([1, 2]);
%! else
%!   mesh.elements.beam2.nodes = int32([2, 1]);
%! endif
%! mesh.elements.beam2.material = int32(1);
%! mesh.elements.beam2.section.A = A;
%! mesh.elements.beam2.section.Ay = Ay;
%! mesh.elements.beam2.section.Az = Az;
%! mesh.elements.beam2.section.It = It;
%! mesh.elements.beam2.section.Iy = Iy;
%! mesh.elements.beam2.section.Iz = Iz;
%! mesh.elements.beam2.e2 = R * [0; -1; 0];
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof(1, :) = true;
%! load_case.loads = [(R * F2).', zeros(1, 3)];
%! load_case.loaded_nodes = int32(2);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! assert(sol_stat.def, Uref, 1e-3 * norm(Uref));
%! endfor
%! endfor
%! unwind_protect_cleanup
%! rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 37
%! for L=2000e-3:1000e-3:50000e-3;
%! w = 10e-3;
%! h = 50e-3;
%! c2 = 0.291;
%! E = 210000e6;
%! nu = 0.3;
%! rho = 7850;
%! N = 20;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! B = E * [Iz];
%! mu = rho * A;
%! omega1 = sqrt(B / (mu * L^4)); ## valid only for lean beams
%! omega_ref = omega1.' * [3.516, 22.035, 61.697];
%! omega_ref = sort(omega_ref(:));
%! f_ref = omega_ref / (2 * pi);
%! R = eye(3);
%! X = [linspace(0, L, N);
%!      zeros(2, N)];
%! mesh.nodes = [(R * X).', zeros(N, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1:N - 1);
%! beam1.nodes = int32([]);
%! beam1.material = int32(1);
%! beam1.section.A = A;
%! beam1.section.Ay = Ay;
%! beam1.section.Az = Az;
%! beam1.section.It = It;
%! beam1.section.Iy = Iy;
%! beam1.section.Iz = Iz;
%! beam1.e2 = R * [0; 1; 0];
%! mesh.elements.beam2 = repmat(beam1, 1, N - 1);
%! for i=1:N - 1
%!   mesh.elements.beam2(i).nodes = int32(i:i+1);
%! endfor
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof(1, :) = true;
%! load_case.locked_dof(:, [1,3,4,5]) = true;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_MAT_MASS], ...
%!                              load_case);
%! [sol_eig] = fem_sol_modal(mesh, dof_map, mat_ass, 3);
%! assert(max(abs(sol_eig.f(:) ./ f_ref(:) - 1)) < 0.1e-2);
%! endfor

%!test
%! ## TEST 38
%! for L = 8000e-3:1000e-3:50000e-3;
%! w = 10e-3;
%! h = 50e-3;
%! c2 = 0.291;
%! E = 210000e6;
%! nu = 0.3;
%! rho = 7850;
%! N = 50;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! B = E * [Iy];
%! mu = rho * A;
%! omega1 = sqrt(B / (mu * L^4));
%! omega_ref = omega1.' * [3.516, 22.035, 61.697]; ## valid only for lean beams
%! omega_ref = sort(omega_ref(:));
%! f_ref = omega_ref / (2 * pi);
%! R = eye(3);
%! X = [linspace(0, L, N);
%!      zeros(2, N)];
%! mesh.nodes = [(R * X).', zeros(N, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1:N - 1);
%! beam1.nodes = int32([]);
%! beam1.material = int32(1);
%! beam1.section.A = A;
%! beam1.section.Ay = Ay;
%! beam1.section.Az = Az;
%! beam1.section.It = It;
%! beam1.section.Iy = Iy;
%! beam1.section.Iz = Iz;
%! beam1.e2 = R * [0; 1; 0];
%! mesh.elements.beam2 = repmat(beam1, 1, N - 1);
%! for i=1:N - 1
%!   mesh.elements.beam2(i).nodes = int32(i:i+1);
%! endfor
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof(1, :) = true;
%! load_case.locked_dof(:, [1,2,4,6]) = true;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_MAT_MASS], ...
%!                              load_case);
%! [sol_eig] = fem_sol_modal(mesh, dof_map, mat_ass, 3);
%! assert(max(abs(sol_eig.f(:) ./ f_ref(:) - 1)) < 0.1e-2);
%! endfor

%!test
%! ## TEST 39
%! for L = 200e-3:1000e-3:5000e-3;
%! w = 10e-3;
%! h = 50e-3;
%! c2 = 0.291;
%! E = 210000e6;
%! nu = 0.3;
%! G = E / (2 * (1 + nu));
%! rho = 7850;
%! N = 50;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! B = E * Iy;
%! S = G * Az;
%! mu = rho * A;
%! n = 1:5;
%! omegaB = sqrt(B * pi^4 / (mu * L^4));
%! omegaS = sqrt(S * pi^2 / (mu * L^2));
%! omega_ref = sqrt(1 ./ (1 ./ (n.^4 * omegaB^2) + 1 ./ (n.^2 * omegaS^2)));
%! f_ref = omega_ref / (2 * pi);
%! R = eye(3);
%! X = [linspace(0, L, N);
%!      zeros(2, N)];
%! mesh.nodes = [(R * X).', zeros(N, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1:N - 1);
%! beam1.nodes = int32([]);
%! beam1.material = int32(1);
%! beam1.section.A = A;
%! beam1.section.Ay = Ay;
%! beam1.section.Az = Az;
%! beam1.section.It = It;
%! beam1.section.Iy = Iy;
%! beam1.section.Iz = Iz;
%! beam1.e2 = R * [0; 1; 0];
%! mesh.elements.beam2 = repmat(beam1, 1, N - 1);
%! for i=1:N - 1
%!   mesh.elements.beam2(i).nodes = int32(i:i+1);
%! endfor
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof([1, end], [1,2,3,4,6]) = true;
%! load_case.locked_dof(:, [1,2,4,6]) = true;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_MAT_MASS], ...
%!                              load_case);
%! [sol_eig] = fem_sol_modal(mesh, dof_map, mat_ass, numel(n));
%! assert(max(abs(sol_eig.f(:) ./ f_ref(:) - 1)) < 5e-2);
%! endfor

%!test
%! ## TEST 40
%! for L = 40e-3:1000e-3:5000e-3;
%! w = 10e-3;
%! h = 50e-3;
%! c2 = 0.291;
%! E = 210000e6;
%! nu = 0.3;
%! G = E / (2 * (1 + nu));
%! rho = 7850;
%! N = 50;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! B = E * Iz;
%! S = G * Ay;
%! mu = rho * A;
%! n = 1:5;
%! omegaB = sqrt(B * pi^4 / (mu * L^4));
%! omegaS = sqrt(S * pi^2 / (mu * L^2));
%! omega_ref = sqrt(1 ./ (1 ./ (n.^4 * omegaB^2) + 1 ./ (n.^2 * omegaS^2)));
%! f_ref = omega_ref / (2 * pi);
%! R = eye(3);
%! X = [linspace(0, L, N);
%!      zeros(2, N)];
%! mesh.nodes = [(R * X).', zeros(N, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1:N - 1);
%! beam1.nodes = int32([]);
%! beam1.material = int32(1);
%! beam1.section.A = A;
%! beam1.section.Ay = Ay;
%! beam1.section.Az = Az;
%! beam1.section.It = It;
%! beam1.section.Iy = Iy;
%! beam1.section.Iz = Iz;
%! beam1.e2 = R * [0; 1; 0];
%! mesh.elements.beam2 = repmat(beam1, 1, N - 1);
%! for i=1:N - 1
%!   mesh.elements.beam2(i).nodes = int32(i:i+1);
%! endfor
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof([1, end], [1,2,3,4,5]) = true;
%! load_case.locked_dof(:, [1,3,4,5]) = true;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_MAT_MASS], ...
%!                              load_case);
%! [sol_eig] = fem_sol_modal(mesh, dof_map, mat_ass, numel(n));
%! assert(max(abs(sol_eig.f(:) ./ f_ref(:) - 1)) < 5e-2);
%! endfor

%!test
%! ## TEST 41
%! ## Robert Gasch, Klaus Knothe 1989
%! ## Strukturdynamik Band 2
%! ## Kontinua und ihre Diskretisierung
%! ## Equation 2.38b, figure 2.11, page 26, chapter 2
%! do_plot = fem_tests_enable_plotting();
%! L = 2000e-3;
%! w = 10e-3;
%! h = 20e-3;
%! c2 = 0.291;
%! E = 70000e6;
%! nu = 0.3;
%! rho = 2700;
%! N = 100;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! B = E * Iy;
%! mu = rho * A;
%! Delta = linspace(1e-6, 10, 1000) / L;
%! omega = sqrt(Delta.^4 * B / mu);
%! P0 = 1;
%! wstat_a = P0 * L^3 / (3 * B);
%! V_a = 3 ./ (Delta * L).^3 .* (sin(Delta * L) .* cosh(Delta * L) - cos(Delta * L) .* sinh(Delta * L)) ./ (1 + cos(Delta * L) .* cosh(Delta * L));
%! R = eye(3);
%! X = [linspace(0, L, N);
%!      zeros(2, N)];
%! mesh.nodes = [(R * X).', zeros(N, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1:N - 1);
%! beam1.nodes = int32([]);
%! beam1.material = int32(1);
%! beam1.section.A = A;
%! beam1.section.Ay = Ay;
%! beam1.section.Az = Az;
%! beam1.section.It = It;
%! beam1.section.Iy = Iy;
%! beam1.section.Iz = Iz;
%! beam1.e2 = R * [0; 1; 0];
%! mesh.elements.beam2 = repmat(beam1, 1, N - 1);
%! for i=1:N - 1
%!   mesh.elements.beam2(i).nodes = int32(i:i+1);
%! endfor
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof(1, :) = true;
%! load_case.loaded_nodes = int32(N);
%! load_case.loads = [0, 0, P0, 0, 0, 0];
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_MAT_MASS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! wdyn = zeros(1, numel(omega));
%! Ustat = mat_ass.K \ mat_ass.R;
%! wstat = Ustat(dof_map.ndof(N, 3));
%! for i=1:numel(omega)
%!   U = (-omega(i)^2 * mat_ass.M + mat_ass.K) \ mat_ass.R;
%!   wdyn(i) = U(dof_map.ndof(N, 3));
%! endfor
%! if (do_plot)
%!   figure("visible", "off");
%!   hold on;
%!   plot(Delta * L, wdyn / wstat_a, "-;V(omega);1");
%!   plot(Delta * L, V_a, "-;V_r_e_f(omega);0");
%!   xlabel("Delta * L [1]");
%!   ylabel("wdyn/wstat [1]");
%!   ylim([-1, 2]);
%!   grid on;
%!   grid minor on;
%!   title("frequency response cantilever beam z-direction");
%! endif
%! assert(wstat, wstat_a, 1e-3 * wstat_a);
%! idx = find(abs(V_a) < 2);
%! assert(mean(abs(wdyn(idx) / wstat_a - V_a(idx))) < 1e-2);

%!test
%! ## TEST 42
%! ## Robert Gasch, Klaus Knothe 1989
%! ## Strukturdynamik Band 2
%! ## Kontinua und ihre Diskretisierung
%! ## Equation 2.38b, figure 2.11, page 26, chapter 2
%! do_plot = fem_tests_enable_plotting();
%! L = 2000e-3;
%! w = 10e-3;
%! h = 20e-3;
%! c2 = 0.291;
%! E = 70000e6;
%! nu = 0.3;
%! rho = 2700;
%! N = 100;
%! A = w * h;
%! Ay = 5 / 6 * w * h;
%! Az = 5 / 6 * w * h;
%! It = c2 * h * w^3;;
%! Iy = w * h^3 / 12;
%! Iz = w^3 * h / 12;
%! B = E * Iz;
%! mu = rho * A;
%! Delta = linspace(1e-6, 10, 1000) / L;
%! omega = sqrt(Delta.^4 * B / mu);
%! P0 = 1;
%! wstat_a = P0 * L^3 / (3 * B);
%! V_a = 3 ./ (Delta * L).^3 .* (sin(Delta * L) .* cosh(Delta * L) - cos(Delta * L) .* sinh(Delta * L)) ./ (1 + cos(Delta * L) .* cosh(Delta * L));
%! R = eye(3);
%! X = [linspace(0, L, N);
%!      zeros(2, N)];
%! mesh.nodes = [(R * X).', zeros(N, 3)];
%! mesh.material_data.E = E;
%! mesh.material_data.nu = nu;
%! mesh.material_data.rho = rho;
%! mesh.materials.beam2 = int32(1:N - 1);
%! beam1.nodes = int32([]);
%! beam1.material = int32(1);
%! beam1.section.A = A;
%! beam1.section.Ay = Ay;
%! beam1.section.Az = Az;
%! beam1.section.It = It;
%! beam1.section.Iy = Iy;
%! beam1.section.Iz = Iz;
%! beam1.e2 = R * [0; 1; 0];
%! mesh.elements.beam2 = repmat(beam1, 1, N - 1);
%! for i=1:N - 1
%!   mesh.elements.beam2(i).nodes = int32(i:i+1);
%! endfor
%! load_case.locked_dof = false(size(mesh.nodes));
%! load_case.locked_dof(1, :) = true;
%! load_case.loaded_nodes = int32(N);
%! load_case.loads = [0, P0, 0, 0, 0, 0];
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.M, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_MAT_MASS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! wdyn = zeros(1, numel(omega));
%! Ustat = mat_ass.K \ mat_ass.R;
%! wstat = Ustat(dof_map.ndof(N, 2));
%! for i=1:numel(omega)
%!   U = (-omega(i)^2 * mat_ass.M + mat_ass.K) \ mat_ass.R;
%!   wdyn(i) = U(dof_map.ndof(N, 2));
%! endfor
%! if (do_plot)
%!   figure("visible", "off");
%!   hold on;
%!   plot(Delta * L, wdyn / wstat_a, "-;V(omega);1");
%!   plot(Delta * L, V_a, "-;V_r_e_f(omega);0");
%!   xlabel("Delta * L [1]");
%!   ylabel("wdyn/wstat [1]");
%!   ylim([-1, 2]);
%!   grid on;
%!   grid minor on;
%!   title("frequency response cantilever beam y-direction");
%! endif
%! assert(wstat, wstat_a, 1e-3 * wstat_a);
%! idx = find(abs(V_a) < 2);
%! assert(mean(abs(wdyn(idx) / wstat_a - V_a(idx))) < 1e-2);

%!test
%! ## TEST 43
%! close all;
%! scale_stat = 1;
%! scale_eig = 250e-3;

%! E = 210000e6;
%! nu = 0.3;
%! material.C = fem_pre_mat_isotropic(E, nu);
%! material.rho = 7850;
%! Fy = 15000;
%! h = 10e-3 / 2;
%! geometry.l = 1000e-3;
%! geometry.w = 10e-3;
%! geometry.h = 50e-3;
%! A = geometry.w * geometry.h;
%! Wz = geometry.h * geometry.w^2 / 6;
%! Iz = geometry.h * geometry.w^3 / 12;
%! tauxx_max = -Fy * geometry.l / Wz;
%! tauxy_mean = Fy / A;
%! Uy = Fy * geometry.l^3 / (3 * E * Iz);
%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! number_of_modes = 10;
%! number_of_modes_disp = 3;
%! plot_def = fem_tests_enable_plotting();

%! f = [ 0; Fy; 0 ];
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, f);
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.M, ...
%!  mat_ass.K, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_MASS, ...
%!                               FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! alg = {"shift-invert", "symmetric-inverse", "unsymmetric"};
%! rho = 100;
%! tol = 1e-6;
%! err = zeros(number_of_modes, numel(alg));
%! for a=1:numel(alg)
%!   [sol_eig(a), err(:, a)] = fem_sol_modal(mesh, dof_map, mat_ass, number_of_modes, rho, tol, alg{a});
%! endfor

%! z = linspace(0,geometry.l,100);

%! I = [ geometry.w * geometry.h, geometry.h * geometry.w^3 / 12, geometry.w * geometry.h^3 / 12 ];

%! y(1,:) = f(1) * geometry.l / ( E * I(1) ) * ( 1 - z / geometry.l );

%! for i=2:3
%!   y(i,:) = f(i) * geometry.l^3 / ( 6 * E * I(i) ) * ( 2 - 3 * z / geometry.l + ( z / geometry.l ).^3 );
%! endfor

%! B = E * I(2:3);
%! my = material.rho * I(1);
%! P0 = ( 0.3 * geometry.l ) / geometry.l^3 * 3 * B;
%! omega1 = sqrt(B / (my * geometry.l^4));
%! omega_ref = omega1.' * [3.516, 22.035, 61.697];
%! omega_ref = sort(reshape(omega_ref, 1, numel(omega_ref)));
%! f_ref = omega_ref / (2 * pi);

%! for a=1:numel(sol_eig)
%!   assert(sol_eig(a).f(1:5), f_ref(1:5), 4e-2 * max(f_ref(1:5)));
%! endfor

%! if (plot_def)
%!   figure("visible","off");
%!   hold on;
%!   fem_post_sol_plot(mesh);
%!   view(30,30);
%!   xlabel('x [m]');
%!   ylabel('y [m]');
%!   zlabel('z [m]');
%!   grid on;
%!   grid minor on;
%!   title('undeformed mesh');

%!   figure("visible","off");
%!   hold on;
%!   fem_post_sol_plot(mesh, sol_stat, scale_stat);
%!   view(30,30);
%!   xlabel('x [m]');
%!   ylabel('y [m]');
%!   zlabel('z [m]');
%!   grid on;
%!   grid minor on;
%!   title('deformed mesh');

%!   for i=1:min(number_of_modes_disp,length(sol_eig(1).f))
%!     figure("visible", "off");
%!     hold on;
%!     fem_post_sol_plot(mesh, sol_eig(1), scale_eig / max(norm(sol_eig(1).def(:, :, i), "rows")),i);
%!     view(30,30);
%!     xlabel('x [m]');
%!     ylabel('y [m]');
%!     zlabel('z [m]');
%!     grid on;
%!     grid minor on;
%!     title(sprintf("%d. eigenmode: %gHz",i,sol_eig(1).f(i)));
%!   endfor
%!   figure_list();
%! endif

%!test
%! ## TEST44
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 50e-3;
%!   b = 20e-3;
%!   c = 15e-3;
%!   x = a * [ 0,  1,  0, 0, 1, 0, 1/2, 1/2,   0, 1/2, 1/2,   0, 0, 1, 0 ];
%!   y = b * [ 0,  0,  1, 0, 0, 1,   0, 1/2, 1/2,   0, 1/2, 1/2, 0, 0, 1 ];
%!   z = 0.5 * c * [-1, -1, -1, 1, 1, 1,  -1,  -1,  -1,   1,   1,   1, 0, 0, 0 ];
%!   for j=1:100
%!     e1 = rand(3, 1);
%!     e2 = rand(3, 1);
%!     e3 = cross(e1, e2);
%!     e2 = cross(e3, e1);
%!     e1 /= norm(e1);
%!     e2 /= norm(e2);
%!     e3 /= norm(e3);
%!     R = [e1, e2, e3];
%!     mesh.nodes = [(R * [x; y; z]).', zeros(numel(x), 3)];
%!     mesh.elements.penta15 = int32(1:rows(mesh.nodes));
%!     mesh.material_data.E = 210000e6;
%!     mesh.material_data.nu = 0.3;
%!     mesh.material_data.rho = 7850;
%!     mesh.materials.penta15 = int32(1);
%!     load_case.locked_dof = false(size(mesh.nodes));
%!     load_case.locked_dof([1, 3, 4, 6, 9, 12, 13, 15], 1:3) = true;
%!     load_case.loads = [[-1 * e3.'; -2 * e3.'; -1 * e3.'], zeros(3, 3)];
%!     load_case.loaded_nodes = int32([2; 14; 5]);
%!     dof_map = fem_ass_dof_map(mesh, load_case);
%!     [mat_ass.K, ...
%!      mat_ass.M, ...
%!      mat_ass.Mdiag, ...
%!      mat_ass.R, ...
%!      mat_ass.mtot] = fem_ass_matrix(mesh, ...
%!                                     dof_map, ...
%!                                     [FEM_MAT_STIFFNESS, ...
%!                                      FEM_MAT_MASS, ...
%!                                      FEM_MAT_MASS_LUMPED, ...
%!                                      FEM_VEC_LOAD_CONSISTENT, ...
%!                                      FEM_SCA_TOT_MASS], ...
%!                                     load_case);
%!     assert(isdefinite(mat_ass.K));
%!     assert(isdefinite(mat_ass.M));
%!     assert(isdefinite(mat_ass.Mdiag));
%!     m_a = 0.5 * a * b * c * mesh.material_data.rho;
%!     tol_m = eps^0.8;
%!     tol_stat = sqrt(eps);
%!     tol_eig = sqrt(eps);
%!     assert(mat_ass.mtot, m_a, tol_m * m_a);
%!
%!     sol_stat = fem_sol_static(mesh, dof_map, mat_ass);
%!     sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                      dof_map, ...
%!                                      FEM_SCA_STRESS_VMIS, ...
%!                                      load_case, ...
%!                                      sol_stat);
%!     sol_eig = fem_sol_modal(mesh, dof_map, mat_ass, 3);
%!     sol_eig.stress = fem_ass_matrix(mesh, ...
%!                                     dof_map, ...
%!                                     FEM_SCA_STRESS_VMIS, ...
%!                                     load_case, ...
%!                                     sol_eig);
%!     for i=1:size(sol_eig.def, 3)
%!       sol_eig.def(:, 1:3, i) = (R.' * sol_eig.def(:, 1:3, i).').';
%!       sol_eig.def(:, :, i) /= max(max(abs(sol_eig.def(:, :, i))));
%!     endfor
%!     if (j == 1)
%!       U_ref_stat = R.' * sol_stat.def(:, 1:3).';
%!       U_ref_eig = sol_eig.def;
%!       f_ref = sol_eig.f;
%!       vmis_stat = sol_stat.stress.vmis.penta15;
%!       vmis_eig = sol_eig.stress.vmis.penta15;
%!     else
%!       assert(R.' * sol_stat.def(:, 1:3).', U_ref_stat, tol_stat * norm(U_ref_stat));
%!       assert(sol_eig.f, f_ref, sqrt(eps) * max(f_ref));
%!       assert(sol_stat.stress.vmis.penta15, vmis_stat, tol_stat * max(max(max(abs(vmis_stat)))));
%!       assert(sol_eig.stress.vmis.penta15, vmis_eig, tol_eig * max(max(max(abs(vmis_eig)))));
%!       for i=1:size(sol_eig.def, 3)
%!         try
%!           assert(sol_eig.def(:, :, i), U_ref_eig(:, :, i), tol_eig);
%!         catch
%!           assert(sol_eig.def(:, :, i), -U_ref_eig(:, :, i), tol_eig);
%!         end_try_catch
%!       endfor
%!     endif
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST45
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 50e-3;
%!   b = 20e-3;
%!   c = 15e-3;
%!   x = a * [ 0,  1,  0, 0, 1, 0, 1/2, 1/2,   0, 1/2, 1/2,   0, 0, 1, 0 ];
%!   y = b * [ 0,  0,  1, 0, 0, 1,   0, 1/2, 1/2,   0, 1/2, 1/2, 0, 0, 1 ];
%!   z = 0.5 * c * [-1, -1, -1, 1, 1, 1,  -1,  -1,  -1,   1,   1,   1, 0, 0, 0 ];
%!   for j=1:100
%!     e1 = rand(3, 1);
%!     e2 = rand(3, 1);
%!     e3 = cross(e1, e2);
%!     e2 = cross(e3, e1);
%!     e1 /= norm(e1);
%!     e2 /= norm(e2);
%!     e3 /= norm(e3);
%!     R = [e1, e2, e3];
%!     mesh.nodes = [(R * [x; y; z]).', zeros(numel(x), 3)];
%!     mesh.elements.penta15 = int32(1:rows(mesh.nodes));
%!     mesh.material_data.E = 210000e6;
%!     mesh.material_data.nu = 0.3;
%!     mesh.material_data.rho = 7850;
%!     mesh.materials.penta15 = int32(1);
%!     load_case.locked_dof = false(size(mesh.nodes));
%!     dof_map = fem_ass_dof_map(mesh, load_case);
%!     [mat_ass.K, ...
%!      mat_ass.M] = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_MAT_STIFFNESS, ...
%!                                   FEM_MAT_MASS, ...
%!                                   FEM_MAT_MASS_LUMPED, ...
%!                                   FEM_VEC_LOAD_CONSISTENT, ...
%!                                   FEM_SCA_TOT_MASS], ...
%!                                   load_case);
%!     assert(isdefinite(mat_ass.K) == 0);
%!     assert(isdefinite(mat_ass.M) == 1);
%!     assert(rank(mat_ass.K), columns(mat_ass.K) - 6);
%!     tol_eig = sqrt(eps);
%!     N = 20;
%!     shift = 1e-2 * max(max(abs(mat_ass.K))) / max(max(abs(mat_ass.M)));
%!     sol_eig = fem_sol_modal(mesh, dof_map, mat_ass, N, shift);
%!     sol_eig.stress = fem_ass_matrix(mesh, ...
%!                                     dof_map, ...
%!                                     FEM_SCA_STRESS_VMIS, ...
%!                                     load_case, ...
%!                                     sol_eig);
%!     assert(max(sol_eig.f(1:6)) < eps^0.3 * min(sol_eig.f(7:end)));
%!     assert(max(max(abs(sol_eig.stress.vmis.penta15(:,:,1:6)))) < eps^0.5 * min(min(abs(sol_eig.stress.vmis.penta15(:, :, 7:end)))));
%!     sol_eig_t = sol_eig;
%!     for i=1:size(sol_eig.def, 3)
%!       sol_eig_t.def(:, 1:3, i) = (R.' * sol_eig_t.def(:, 1:3, i).').';
%!       sol_eig_t.def(:, :, i) /= max(max(abs(sol_eig_t.def(:, :, i))));
%!     endfor
%!     if (j == 1)
%!       U_ref_eig = sol_eig_t.def;
%!       f_ref = sol_eig.f;
%!       vmis_eig = sol_eig.stress.vmis.penta15;
%!     else
%!       assert(sol_eig.f(7:end), f_ref(7:end), sqrt(eps) * max(f_ref));
%!       assert(sol_eig.stress.vmis.penta15, vmis_eig, tol_eig * max(max(max(abs(vmis_eig)))));
%!       for i=7:size(sol_eig.def, 3)
%!         try
%!           assert(sol_eig_t.def(:, :, i), U_ref_eig(:, :, i), tol_eig);
%!         catch
%!           assert(sol_eig_t.def(:, :, i), -U_ref_eig(:, :, i), tol_eig);
%!         end_try_catch
%!       endfor
%!     endif
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST46
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 50e-3;
%!   b = 20e-3;
%!   c = 15e-3;
%!   x = a * [ 0,  1,  0, 0, 1, 0, 1/2, 1/2,   0, 1/2, 1/2,   0, 0, 1, 0 ] + a;
%!   y = b * [ 0,  0,  1, 0, 0, 1,   0, 1/2, 1/2,   0, 1/2, 1/2, 0, 0, 1 ] + b;
%!   z = 0.5 * c * [-1, -1, -1, 1, 1, 1,  -1,  -1,  -1,   1,   1,   1, 0, 0, 0 ] + c;
%!   E = 210000e6;
%!   nu = 0.3;
%!   for j=1:100
%!     for k=1:6
%!       switch (k)
%!       case {1, 2, 3}
%!         epsilon = [2 * rand(3, 1) - 1; zeros(3, 1)];
%!       otherwise
%!         epsilon = zeros(6, 1);
%!         epsilon(k) = 2 * rand() - 1;
%!       endswitch
%!       e1 = rand(3, 1);
%!       e2 = rand(3, 1);
%!       e3 = cross(e1, e2);
%!       e2 = cross(e3, e1);
%!       e1 /= norm(e1);
%!       e2 /= norm(e2);
%!       e3 /= norm(e3);
%!       R = [e1, e2, e3];
%!       mesh.nodes = [(R * [x; y; z]).', zeros(numel(x), 3)];
%!       mesh.elements.penta15 = int32(1:rows(mesh.nodes));
%!       mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!       mesh.material_data.rho = 7850;
%!       mesh.materials.penta15 = int32(1);
%!       load_case.locked_dof = false(size(mesh.nodes));
%!       dof_map = fem_ass_dof_map(mesh, load_case);
%!       sol_stat.def = zeros(size(mesh.nodes));
%!       gammaxx = epsilon(1);
%!       gammayy = epsilon(2);
%!       gammazz = epsilon(3);
%!       gammaxy = epsilon(4);
%!       gammayz = epsilon(5);
%!       gammazx = epsilon(6);
%!       X = mesh.nodes(:, 1);
%!       Y = mesh.nodes(:, 2);
%!       Z = mesh.nodes(:, 3);
%!       u = (X.*Z.*gammazx-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*X) + gammaxx * X;
%!       v = ((-X.*Z.*gammazx)+Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Y) + gammayy * Y;
%!       w = -((-X.*Z.*gammazx)-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Z) + gammazz * Z;
%!       sol_stat.def(:, 1) = u;
%!       sol_stat.def(:, 2) = v; 
%!       sol_stat.def(:, 3) = w;
%!       tau = mesh.material_data.C * epsilon;
%!       sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                        dof_map, ...
%!                                        FEM_VEC_STRESS_CAUCH, ...
%!                                        load_case, ...
%!                                        sol_stat);
%!      switch (k)
%!      case {1,2,3}
%!        for i=1:3
%!          assert(max(abs(sol_stat.stress.tau.penta15(1, :, i) ./ tau(i) - 1)) < sqrt(eps));
%!          assert(max(abs(sol_stat.stress.tau.penta15(1, :, i + 3) ./ max(abs(tau)))) < sqrt(eps));
%!        endfor
%!      otherwise
%!        assert(max(abs(sol_stat.stress.tau.penta15(1, :, k) ./ tau(k) - 1)) < sqrt(eps));
%!      endswitch
%!   endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 47
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 50e-3;
%!   b = 20e-3;
%!   c = 15e-3;
%!   x = a * [  1, -1, -1,  1,  1, -1, -1,  1, 0, -1,  0, 1,  0, -1,  0,  1, 1, -1, -1,  1] + 2 * a;
%!   y = b * [  1,  1, -1, -1,  1,  1, -1, -1, 1,  0, -1, 0,  1,  0, -1,  0, 1,  1, -1, -1] + 2 * b;
%!   z = c * [  1,  1,  1,  1, -1, -1, -1, -1, 1,  1,  1, 1, -1, -1, -1, -1, 0,  0,  0,  0] + 2 * c;
%!   E = 210000e6;
%!   nu = 0.3;
%!   for j=1:100
%!     for k=1:6
%!       switch (k)
%!       case {1, 2, 3}
%!         epsilon = [2 * rand(3, 1) - 1; zeros(3, 1)];
%!       otherwise
%!         epsilon = zeros(6, 1);
%!         epsilon(k) = 2 * rand() - 1;
%!       endswitch
%!       e1 = rand(3, 1);
%!       e2 = rand(3, 1);
%!       e3 = cross(e1, e2);
%!       e2 = cross(e3, e1);
%!       e1 /= norm(e1);
%!       e2 /= norm(e2);
%!       e3 /= norm(e3);
%!       R = [e1, e2, e3];
%!       mesh.nodes = [(R * [x; y; z]).', zeros(numel(x), 3)];
%!       mesh.elements.iso20 = int32(1:rows(mesh.nodes));
%!       mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!       mesh.material_data.rho = 7850;
%!       mesh.materials.iso20 = int32(1);
%!       load_case.locked_dof = false(size(mesh.nodes));
%!       dof_map = fem_ass_dof_map(mesh, load_case);
%!       sol_stat.def = zeros(size(mesh.nodes));
%!       gammaxx = epsilon(1);
%!       gammayy = epsilon(2);
%!       gammazz = epsilon(3);
%!       gammaxy = epsilon(4);
%!       gammayz = epsilon(5);
%!       gammazx = epsilon(6);
%!       X = mesh.nodes(:, 1);
%!       Y = mesh.nodes(:, 2);
%!       Z = mesh.nodes(:, 3);
%!       u = (X.*Z.*gammazx-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*X) + gammaxx * X;
%!       v = ((-X.*Z.*gammazx)+Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Y) + gammayy * Y;
%!       w = -((-X.*Z.*gammazx)-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Z) + gammazz * Z;
%!       sol_stat.def(:, 1) = u;
%!       sol_stat.def(:, 2) = v; 
%!       sol_stat.def(:, 3) = w;
%!       tau = mesh.material_data.C * epsilon;
%!       sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                        dof_map, ...
%!                                        FEM_VEC_STRESS_CAUCH, ...
%!                                        load_case, ...
%!                                        sol_stat);
%!      switch (k)
%!      case {1,2,3}
%!        for i=1:3
%!          assert(max(abs(sol_stat.stress.tau.iso20(1, :, i) ./ tau(i) - 1)) < sqrt(eps));
%!          assert(max(abs(sol_stat.stress.tau.iso20(1, :, i + 3) ./ max(abs(tau)))) < sqrt(eps));
%!        endfor
%!      otherwise
%!        assert(max(abs(sol_stat.stress.tau.iso20(1, :, k) ./ tau(k) - 1)) < sqrt(eps));
%!      endswitch
%!   endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 48
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 50e-3;
%!   b = 20e-3;
%!   c = 15e-3;
%!   x = a * [  1, -1, -1,  1,  1, -1, -1,  1] + 2 * a;
%!   y = b * [  1,  1, -1, -1,  1,  1, -1, -1] + 2 * b;
%!   z = c * [  1,  1,  1,  1, -1, -1, -1, -1] + 2 * c;
%!   E = 210000e6;
%!   nu = 0.3;
%!   for j=1:100
%!     for k=1:6
%!       switch (k)
%!       case {1, 2, 3}
%!         epsilon = [2 * rand(3, 1) - 1; zeros(3, 1)];
%!       otherwise
%!         epsilon = zeros(6, 1);
%!         epsilon(k) = 2 * rand() - 1;
%!       endswitch
%!       e1 = rand(3, 1);
%!       e2 = rand(3, 1);
%!       e3 = cross(e1, e2);
%!       e2 = cross(e3, e1);
%!       e1 /= norm(e1);
%!       e2 /= norm(e2);
%!       e3 /= norm(e3);
%!       R = [e1, e2, e3];
%!       mesh.nodes = [(R * [x; y; z]).', zeros(numel(x), 3)];
%!       mesh.elements.iso8 = int32(1:rows(mesh.nodes));
%!       mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!       mesh.material_data.rho = 7850;
%!       mesh.materials.iso8 = int32(1);
%!       load_case.locked_dof = false(size(mesh.nodes));
%!       dof_map = fem_ass_dof_map(mesh, load_case);
%!       sol_stat.def = zeros(size(mesh.nodes));
%!       gammaxx = epsilon(1);
%!       gammayy = epsilon(2);
%!       gammazz = epsilon(3);
%!       gammaxy = epsilon(4);
%!       gammayz = epsilon(5);
%!       gammazx = epsilon(6);
%!       X = mesh.nodes(:, 1);
%!       Y = mesh.nodes(:, 2);
%!       Z = mesh.nodes(:, 3);
%!       u = (X.*Z.*gammazx-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*X) + gammaxx * X;
%!       v = ((-X.*Z.*gammazx)+Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Y) + gammayy * Y;
%!       w = -((-X.*Z.*gammazx)-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Z) + gammazz * Z;
%!       sol_stat.def(:, 1) = u;
%!       sol_stat.def(:, 2) = v; 
%!       sol_stat.def(:, 3) = w;
%!       tau = mesh.material_data.C * epsilon;
%!       sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                        dof_map, ...
%!                                        FEM_VEC_STRESS_CAUCH, ...
%!                                        load_case, ...
%!                                        sol_stat);
%!      switch (k)
%!      case {1,2,3}
%!        for i=1:3
%!          assert(max(abs(sol_stat.stress.tau.iso8(1, :, i) ./ tau(i) - 1)) < sqrt(eps));
%!          assert(max(abs(sol_stat.stress.tau.iso8(1, :, i + 3) ./ max(abs(tau)))) < sqrt(eps));
%!        endfor
%!      otherwise
%!        assert(max(abs(sol_stat.stress.tau.iso8(1, :, k) ./ tau(k) - 1)) < sqrt(eps));
%!      endswitch
%!   endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 49
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 10e-3;
%!   b = 20e-3;
%!   c = 40e-3;
%!   xi = [      0,       0,       0;
%!               a,       0,       0;
%!               0,       b,       0;
%!               0,       0,       c;
%!         0.5 * a,       0,       0;
%!         0.5 * a, 0.5 * b,       0;
%!               0, 0.5 * b,       0;
%!               0,       0, 0.5 * c;
%!         0.5 * a,       0, 0.5 * c;
%!               0, 0.5 * b, 0.5 * c];
%!   xi(:, 1) += a;
%!   xi(:, 2) += b;
%!   xi(:, 3) += c;
%!   E = 210000e6;
%!   nu = 0.3;
%!   for j=1:100
%!     for k=1:6
%!       switch (k)
%!       case {1, 2, 3}
%!         epsilon = [2 * rand(3, 1) - 1; zeros(3, 1)];
%!       otherwise
%!         epsilon = zeros(6, 1);
%!         epsilon(k) = 2 * rand() - 1;
%!       endswitch
%!       e1 = rand(3, 1);
%!       e2 = rand(3, 1);
%!       e3 = cross(e1, e2);
%!       e2 = cross(e3, e1);
%!       e1 /= norm(e1);
%!       e2 /= norm(e2);
%!       e3 /= norm(e3);
%!       R = [e1, e2, e3];
%!       mesh.nodes = [(R * xi.').', zeros(rows(xi), 3)];
%!       mesh.elements.tet10 = int32(1:rows(mesh.nodes));
%!       mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!       mesh.material_data.rho = 7850;
%!       mesh.materials.tet10 = int32(1);
%!       load_case.locked_dof = false(size(mesh.nodes));
%!       dof_map = fem_ass_dof_map(mesh, load_case);
%!       sol_stat.def = zeros(size(mesh.nodes));
%!       gammaxx = epsilon(1);
%!       gammayy = epsilon(2);
%!       gammazz = epsilon(3);
%!       gammaxy = epsilon(4);
%!       gammayz = epsilon(5);
%!       gammazx = epsilon(6);
%!       X = mesh.nodes(:, 1);
%!       Y = mesh.nodes(:, 2);
%!       Z = mesh.nodes(:, 3);
%!       u = (X.*Z.*gammazx-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*X) + gammaxx * X;
%!       v = ((-X.*Z.*gammazx)+Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Y) + gammayy * Y;
%!       w = -((-X.*Z.*gammazx)-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Z) + gammazz * Z;
%!       sol_stat.def(:, 1) = u;
%!       sol_stat.def(:, 2) = v; 
%!       sol_stat.def(:, 3) = w;
%!       tau = mesh.material_data.C * epsilon;
%!       sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                        dof_map, ...
%!                                        FEM_VEC_STRESS_CAUCH, ...
%!                                        load_case, ...
%!                                        sol_stat);
%!      switch (k)
%!      case {1,2,3}
%!        for i=1:3
%!          assert(max(abs(sol_stat.stress.tau.tet10(1, :, i) ./ tau(i) - 1)) < sqrt(eps));
%!          assert(max(abs(sol_stat.stress.tau.tet10(1, :, i + 3) ./ max(abs(tau)))) < sqrt(eps));
%!        endfor
%!      otherwise
%!        assert(max(abs(sol_stat.stress.tau.tet10(1, :, k) ./ tau(k) - 1)) < sqrt(eps));
%!      endswitch
%!   endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 50
%! state = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   a = 10e-3;
%!   b = 20e-3;
%!   c = 40e-3;
%!   xi = [      0,       0,       0;
%!               a,       0,       0;
%!               0,       b,       0;
%!               0,       0,       c;
%!         0.5 * a,       0,       0;
%!         0.5 * a, 0.5 * b,       0;
%!               0, 0.5 * b,       0;
%!               0,       0, 0.5 * c;
%!         0.5 * a,       0, 0.5 * c;
%!               0, 0.5 * b, 0.5 * c];
%!   xi(:, 1) += a;
%!   xi(:, 2) += b;
%!   xi(:, 3) += c;
%!   E = 210000e6;
%!   nu = 0.3;
%!   for j=1:100
%!     for k=1:6
%!       switch (k)
%!       case {1, 2, 3}
%!         epsilon = [2 * rand(3, 1) - 1; zeros(3, 1)];
%!       otherwise
%!         epsilon = zeros(6, 1);
%!         epsilon(k) = 2 * rand() - 1;
%!       endswitch
%!       e1 = rand(3, 1);
%!       e2 = rand(3, 1);
%!       e3 = cross(e1, e2);
%!       e2 = cross(e3, e1);
%!       e1 /= norm(e1);
%!       e2 /= norm(e2);
%!       e3 /= norm(e3);
%!       R = [e1, e2, e3];
%!       mesh.nodes = [(R * xi.').', zeros(rows(xi), 3)];
%!       mesh.elements.tet10h = int32(1:rows(mesh.nodes));
%!       mesh.material_data.C = fem_pre_mat_isotropic(E, nu);
%!       mesh.material_data.rho = 7850;
%!       mesh.materials.tet10h = int32(1);
%!       load_case.locked_dof = false(size(mesh.nodes));
%!       dof_map = fem_ass_dof_map(mesh, load_case);
%!       sol_stat.def = zeros(size(mesh.nodes));
%!       gammaxx = epsilon(1);
%!       gammayy = epsilon(2);
%!       gammazz = epsilon(3);
%!       gammaxy = epsilon(4);
%!       gammayz = epsilon(5);
%!       gammazx = epsilon(6);
%!       X = mesh.nodes(:, 1);
%!       Y = mesh.nodes(:, 2);
%!       Z = mesh.nodes(:, 3);
%!       u = (X.*Z.*gammazx-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*X) + gammaxx * X;
%!       v = ((-X.*Z.*gammazx)+Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Y) + gammayy * Y;
%!       w = -((-X.*Z.*gammazx)-Y.*Z.*gammayz+X.*Y.*gammaxy)./(2.*Z) + gammazz * Z;
%!       sol_stat.def(:, 1) = u;
%!       sol_stat.def(:, 2) = v; 
%!       sol_stat.def(:, 3) = w;
%!       tau = mesh.material_data.C * epsilon;
%!       m_a = a * b * c * mesh.material_data.rho / 6;
%!       [sol_stat.stress, ...
%!        mat_ass.mtot] = fem_ass_matrix(mesh, ...
%!                                       dof_map, ...
%!                                       [FEM_VEC_STRESS_CAUCH, FEM_SCA_TOT_MASS], ...
%!                                       load_case, ...
%!                                       sol_stat);
%!      assert(mat_ass.mtot, m_a, eps^0.9 * m_a);
%!      switch (k)
%!      case {1,2,3}
%!        for i=1:3
%!          assert(max(abs(sol_stat.stress.tau.tet10h(1, :, i) ./ tau(i) - 1)) < sqrt(eps));
%!          assert(max(abs(sol_stat.stress.tau.tet10h(1, :, i + 3) ./ max(abs(tau)))) < sqrt(eps));
%!        endfor
%!      otherwise
%!        assert(max(abs(sol_stat.stress.tau.tet10h(1, :, k) ./ tau(k) - 1)) < sqrt(eps));
%!      endswitch
%!   endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", state);
%! end_unwind_protect

%!test
%! ## TEST 51
%! if (~fem_sol_check_func("pastix"))
%!   return;
%! endif
%! s = rand("state");
%! unwind_protect
%!   rand("seed", 0);
%!   N = 1000;
%!   for i=1:100
%!     for j=1:3
%!       A = sprand(N, N, 0.01) + diag(rand(N, 1));
%!       A += A.';
%!       opts.factorization = PASTIX_API_FACT_LDLT;
%!       opts.refine_max_iter = int32(100);
%!       opts.matrix_type = PASTIX_API_SYM_YES;
%!       opts.epsilon_refine = eps^0.7;
%!       opts.verbose = PASTIX_API_VERBOSE_NOT;
%!       switch (j)
%!         case 1
%!           Asym = A;
%!           opts.symmetric = false;
%!         case {2, 3}
%!           [r, c, d] = find(A);
%!           switch (j)
%!             case 2
%!               idx = find(r >= c);
%!             case 3
%!               idx = find(r <= c);
%!           endswitch
%!           Asym = sparse(r(idx), c(idx), d(idx), rows(A), columns(A));
%!           opts.symmetric = true;
%!       endswitch
%!       Afact = fem_fact_pastix_ref(Asym, opts);
%!       B = rand(rows(A), 30);
%!       X = Afact \ B;
%!       assert(max(norm(A * X - B, "cols") ./ norm(A * X + B, "cols")) < opts.epsilon_refine);
%!     endfor
%!   endfor
%! unwind_protect_cleanup
%!   rand("state", s);
%! end_unwind_protect

%!test
%! ## TEST 52
%! close all;
%! elem_types = {"iso8", "iso20"};
%! for k=1:numel(elem_types)
%! options.elem_type = elem_types{k};
%! switch (options.elem_type)
%! case "iso8"
%!   M = 2;
%! case "iso20"
%!   M = 1;
%! endswitch
%! geometry.user_data.l = 10e-3;
%! geometry.user_data.w = 0.02e-3;
%! geometry.user_data.h = 0.02e-3;
%! dx = 1e-3 / M;
%!
%! function [x, y, z, R, Phi] = cube_geo(geo, r, s, t)
%!   x = geo.l * r;
%!   y = geo.w * s;
%!   z = geo.h * t;
%! endfunction
%!
%! function p = pressure_callback(r, s, t, geometry, load_data, perm_idx)
%!   p = [];
%! endfunction
%!
%! function [F, locked] = boundary_cond_callback(r, s, t, geometry, load_data)
%!   F = [];
%!   locked = [];
%! endfunction
%!
%! geometry.mesh_size.r = linspace(0, 1, max([2, ceil(geometry.user_data.l / dx) + 1]));
%! geometry.mesh_size.s = linspace(0, 1, max([2, ceil(geometry.user_data.w / dx) + 1]));
%! geometry.mesh_size.t = linspace(0, 1, max([2, ceil(geometry.user_data.h / dx) + 1]));
%! geometry.sewing.tolerance = sqrt(eps) * geometry.user_data.l;
%! geometry.spatial_coordinates = @(r, s, t) feval("cube_geo", geometry.user_data, r, s, t);
%! geometry.material_selector = @(r, s, t) 1;
%! geometry.boundary_condition =  @(r, s, t, geometry, load_data) feval("boundary_cond_callback", r, s, t, geometry, load_data);
%! geometry.pressure_boundary_condition = @(r, s, t, geometry, load_data, perm_idx) feval("pressure_callback", r, s, t, geometry, load_data, perm_idx);
%! k = 50;
%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;
%! material.k = diag([k, k, k]);
%! material.cp = 465;
%! load_data.pressure = 0;
%! [mesh] = fem_pre_mesh_struct_create(geometry, load_data, material, options);
%! load_case.locked_dof = false(rows(mesh.nodes), 1);
%! load_case.domain = FEM_DO_THERMAL;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! empty_cell = cell(1, 2);
%! sol = struct("t", empty_cell, "theta", empty_cell);
%! for j=1:2
%!   switch (j)
%!     case 1
%!       R = eye(3);
%!     case 2
%!       e1 = [0.5; 0.2; 0.1];
%!       e2 = [0; 1; 0];
%!       e3 = cross(e1, e2);
%!       e2 = cross(e3, e1);
%!       R = [e1 / norm(e1), e2 / norm(e2), e3 / norm(e3)];
%!   endswitch
%!   mesh.nodes = [mesh.nodes(:, 1:3) * R.', mesh.nodes(:, 4:6) * R.'];
%!   [mat_ass.Kk, mat_ass.C] = fem_ass_matrix(mesh, ...
%!                                            dof_map, ...
%!                                            [FEM_MAT_THERMAL_COND, ...
%!                                             FEM_MAT_HEAT_CAPACITY], ...
%!                                            load_case);
%!   qref = material.rho * material.cp * geometry.user_data.l * geometry.user_data.w * geometry.user_data.h;
%!   assert(sum(sum(mat_ass.C)), qref, eps^0.5 * abs(qref));
%!   theta_x0 = 20;
%!   theta_xl = 100;
%!   theta0 = (R(:,1).' * mesh.nodes(:, 1:3).' - R(:, 1).' * mesh.nodes(1, 1:3).') / geometry.user_data.l * (theta_xl - theta_x0) + theta_x0;
%!   dt = 0.1;
%!   alpha = 0.5;
%!   sol(j).t = 0:dt:100;
%!   sol(j).theta = zeros(dof_map.totdof, numel(sol(j).t));
%!   sol(j).theta(:, 1) = theta0;
%!   A = (1 / dt) * mat_ass.C + alpha * mat_ass.Kk;
%!   opts.number_of_threads = int32(4);
%!   opts.solver = "chol";
%!   Afact = fem_sol_factor(A, opts);
%!   for i=2:numel(sol(j).t)
%!     sol(j).theta(:, i) = Afact \ (mat_ass.C * (sol(j).theta(:, i - 1)) / dt - mat_ass.Kk * (sol(j).theta(:, i - 1) * (1 - alpha)));
%!   endfor
%!   assert(sol(j).theta(:, end), repmat(0.5 * (theta_x0 + theta_xl), rows(sol(j).theta), 1), eps^0.5 * abs(theta_xl));
%! endfor
%! assert(sol(2).theta, sol(1).theta, eps^0.5 * abs(theta_xl));
%! if (exist("fem_tests_enable_plotting") && fem_tests_enable_plotting())
%!   figure("visible", "off");
%!   hold on;
%!   for j=1:2
%!     plot(sol(j).t, max(sol(j).theta, [], 1), sprintf("-;max(theta%d);1", j));
%!     plot(sol(j).t, min(sol(j).theta, [], 1), sprintf("-;min(theta%d);3", j));
%!   endfor
%!   xlabel("t [s]");
%!   ylabel("theta [degC]");
%!   grid on;
%!   grid minor on;
%!   title("transient thermal problem of a bar");
%! endif
%! endfor

%!test
%! ## TEST 53
%! ## The 1-D Heat Equation
%! ## 18.303 Linear Partial Differential Equations
%! ## Matthew J. Hancock
%! ## Fall 2006
%! ## https://ocw.mit.edu/courses/mathematics/18-303-linear-partial-differential-equations-fall-2006/lecture-notes/heateqni.pdf
%!
%! if (exist("fem_tests_enable_plotting") && fem_tests_enable_plotting())
%!   close all;
%! endif
%!
%! elem_types = {"iso8", "iso20"};

%! function [x, y, z, R, Phi] = cube_geo(geo, r, s, t)
%!   x = geo.l * r;
%!   y = geo.w * s;
%!   z = geo.h * t;
%! endfunction

%! function p = pressure_callback(r, s, t, geometry, load_data, perm_idx)
%!   p = [];
%! endfunction

%! function [F, locked] = boundary_cond_callback(r, s, t, geometry, load_data)
%!   F = [];
%!   locked = [];
%! endfunction

%! for k=1:numel(elem_types)
%!   options.elem_type = elem_types{k};
%!   switch (options.elem_type)
%!     case "iso8"
%!       M = 2;
%!     case "iso20"
%!       M = 1;
%!   endswitch
%!   geometry.user_data.l = 20e-3;
%!   geometry.user_data.w = 1e-3;
%!   geometry.user_data.h = 1e-3;
%!   dx = 1e-3 / M;
%!   geometry.mesh_size.r = linspace(0, 1, max([2, ceil(geometry.user_data.l / dx) + 1]));
%!   geometry.mesh_size.s = linspace(0, 1, max([2, ceil(geometry.user_data.w / dx) + 1]));
%!   geometry.mesh_size.t = linspace(0, 1, max([2, ceil(geometry.user_data.h / dx) + 1]));
%!   geometry.sewing.tolerance = sqrt(eps) * geometry.user_data.l;
%!   geometry.spatial_coordinates = @(r, s, t) feval("cube_geo", geometry.user_data, r, s, t);
%!   geometry.material_selector = @(r, s, t) 1;
%!   geometry.boundary_condition =  @(r, s, t, geometry, load_data) feval("boundary_cond_callback", r, s, t, geometry, load_data);
%!   geometry.pressure_boundary_condition = @(r, s, t, geometry, load_data, perm_idx) feval("pressure_callback", r, s, t, geometry, load_data, perm_idx);
%!   K0 = 5000;
%!   material.E = 210000e6;
%!   material.nu = 0.3;
%!   material.rho = 7850;
%!   material.k = diag([K0, K0, K0]);
%!   material.cp = 465;
%!   u0 = 100;
%!   ub = 50;
%!   load_data.pressure = 0;
%!   [mesh] = fem_pre_mesh_struct_create(geometry, load_data, material, options);
%!   load_case.locked_dof = false(rows(mesh.nodes), 1);
%!   load_case.domain = FEM_DO_THERMAL;
%!   [dof_map] = fem_ass_dof_map(mesh, load_case);
%!   empty_cell = cell(1, 2);
%!   sol = struct("t", empty_cell, "theta", empty_cell);
%!   for j=1:2
%!     switch (j)
%!       case 1
%!         R = eye(3);
%!       case 2
%!         e1 = [0.5; 0.2; 0.1];
%!         e2 = [0; 1; 0];
%!         e3 = cross(e1, e2);
%!         e2 = cross(e3, e1);
%!         R = [e1 / norm(e1), e2 / norm(e2), e3 / norm(e3)];
%!     endswitch
%!     cond_b = (mesh.nodes(:, 1) == 0 | mesh.nodes(:, 1) == geometry.user_data.l);
%!     idx_b = find(cond_b);
%!     idx_i = find(~cond_b);
%!     x = mesh.nodes(:, 1);
%!     mesh.nodes = [mesh.nodes(:, 1:3) * R.', mesh.nodes(:, 4:6) * R.'];
%!     [mat_ass.Kk, mat_ass.C] = fem_ass_matrix(mesh, ...
%!                                              dof_map, ...
%!                                              [FEM_MAT_THERMAL_COND, ...
%!                                               FEM_MAT_HEAT_CAPACITY], ...
%!                                              load_case);
%!     Kk11 = mat_ass.Kk(idx_i, idx_i);
%!     Kk12 = mat_ass.Kk(idx_i, idx_b);
%!     C11 = mat_ass.C(idx_i, idx_i);
%!     theta_b = repmat(ub, numel(idx_b), 1);
%!     theta0 = repmat(u0, dof_map.totdof, 1);
%!     qref = material.rho * material.cp * geometry.user_data.l * geometry.user_data.w * geometry.user_data.h;
%!     assert(sum(sum(mat_ass.C)), qref, eps^0.5 * abs(qref));
%!     kappa = K0 / (material.rho * material.cp);
%!     T_ = geometry.user_data.l^2 / kappa;
%!     dt = dx^2 / (2 * kappa);
%!     alpha = 0.6;
%!     sol(j).t = 0:dt:0.1*T_;
%!     sol(j).theta = zeros(dof_map.totdof, numel(sol(j).t));
%!     sol(j).theta(:, 1) = theta0;
%!     A = (1 / dt) * C11 + alpha * Kk11;
%!     opts.number_of_threads = int32(1);
%!     opts.solver = "pastix";
%!     Afact = fem_sol_factor(A, opts);
%!     for i=2:numel(sol(j).t)
%!       sol(j).theta(idx_i, i) = Afact \ (C11 * (sol(j).theta(idx_i, i - 1) / dt) - Kk11 * (sol(j).theta(idx_i, i - 1) * (1 - alpha)) - Kk12 * theta_b);
%!       sol(j).theta(idx_b, i) = theta_b;
%!     endfor
%!     u0_ = 1;
%!     n = 1:10000;
%!     Bn_ = -2 * u0_ ./ (n * pi) .* ((-1).^n - 1);
%!     x_ = x / geometry.user_data.l;
%!     u_ = zeros(numel(x), numel(sol(j).t));
%!     for n=1:numel(Bn_)
%!       t_ = sol(j).t / T_;
%!       u_ += Bn_(n) * sin(n * pi * x_) .* exp(-n^2 * pi^2 * t_);
%!     endfor
%!     sol(j).theta_ref = u_ * (u0 - ub) + ub;
%!   endfor
%!   [x, idx_theta] = sort(x);
%!   if (exist("fem_tests_enable_plotting") && fem_tests_enable_plotting())
%!   for j=1:numel(sol)
%!     colors = rainbow(numel(sol(j).t));
%!     figure("visible", "off");
%!     hold on;
%!     legend off;
%!     for i=1:10:numel(sol(j).t)
%!       set(plot(x, sol(j).theta(idx_theta, i), sprintf("-;t=%.2f;", sol(j).t(i))), "color", colors(i,:));
%!       hnd = plot(x, sol(j).theta_ref(idx_theta, i), sprintf("--;tref=%.2f;", sol(j).t(i)));
%!       set(hnd, "color", colors(i,:));
%!       set(hnd, "linewidth", 2);
%!     endfor
%!     xlabel("t [s]");
%!     ylabel("theta [degC]");
%!     grid on;
%!     grid minor on;
%!     title(sprintf("transient thermal problem of a bar: %s/%d", elem_types{k}, j));
%!   endfor
%!   endif
%!   tol = 1e-2;
%!   assert(sol(j).theta(:, 10:end), sol(j).theta_ref(:, 10:end), tol * abs(u0 - ub));
%! endfor

%!demo
%! ## DEMO 1
%! ## Cantilever beam with rectangular cross section and lateral load
%! ## W.Beitz, K.-H.Grothe, 1997, Dubbel, section 2.4.6, page C17, figure 23
%! close all;
%! do_post_pro = true;
%! num_iso = 10;
%! material.E = 210000e6;
%! material.nu = 0.3;
%! material.rho = 7850;
%! Fz = -15000;
%! h = 2e-3;
%! geometry.l = 150e-3;
%! geometry.w = h;
%! geometry.h = 60e-3;
%! mesh_size.num_elem_l = ceil(geometry.l / h);
%! mesh_size.num_elem_w = ceil(geometry.w / h);
%! mesh_size.num_elem_h = ceil(geometry.h / h);
%! f = [ 0; 0; Fz ];
%! [mesh, load_case] = fem_pre_mesh_cube_create(geometry, mesh_size, material, f);
%! mesh.nodes(:, 3) -= 0.5 * geometry.h;
%! [dof_map] = fem_ass_dof_map(mesh, load_case);
%! [mat_ass.K, ...
%!  mat_ass.R] = fem_ass_matrix(mesh, ...
%!                              dof_map, ...
%!                              [FEM_MAT_STIFFNESS, ...
%!                               FEM_VEC_LOAD_CONSISTENT], ...
%!                              load_case);
%! [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);
%! sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                  dof_map, ...
%!                                  [FEM_VEC_STRESS_CAUCH], ...
%!                                  load_case, ...
%!                                  sol_stat);
%! x = linspace(0, geometry.l, 100);
%! z = linspace(-0.5 * geometry.h, 0.5 * geometry.h, 50);
%! [xx, zz] = meshgrid(x, z);
%! xtauel = mesh.nodes(:, 1)(mesh.elements.iso8);
%! ytauel = mesh.nodes(:, 1)(mesh.elements.iso8);
%! ztauel = mesh.nodes(:, 3)(mesh.elements.iso8);
%! tauxxel = sol_stat.stress.taum.iso8(:, :, 1);
%! tauxzel = sol_stat.stress.taum.iso8(:, :, 6);
%! tauxx = griddata(xtauel(:), ztauel(:), tauxxel(:), xx, zz);
%! tauxz = griddata(xtauel(:), ztauel(:), tauxzel(:), xx, zz);
%! Iy = geometry.w * geometry.h^3 / 12;
%! tauxx_a = -Fz / Iy * (geometry.l - xx) .* zz;
%! tauxz_a = 3 / 2 * Fz / (geometry.h * geometry.w) * (1 - (zz / (0.5 * geometry.h)).^2);
%! scale_tauxx = linspace(min(min(tauxx_a)), max(max(tauxx_a)), num_iso + 1);
%! scale_tauxz = linspace(min(min(tauxz_a)), max(max(tauxz_a)), num_iso + 1);
%! figure("visible", "off");
%! subplot(2, 1, 1);
%! contourf(xx, zz, tauxx_a, scale_tauxx);
%! daspect([1,1,1]);
%! colormap jet;
%! colorbar;
%! xlabel("x [m]");
%! ylabel("z [m]");
%! title("stress component tauxx [Pa]");
%! grid on;
%! grid minor on;
%! subplot(2, 1, 2);
%! contourf(xx, zz, tauxx, scale_tauxx);
%! daspect([1,1,1]);
%! colormap jet;
%! colorbar;
%! xlabel("x [m]");
%! ylabel("z [m]");
%! title("stress component tauxx [Pa]");
%! grid on;
%! grid minor on;
%! figure("visible", "off");
%! subplot(2, 1, 1);
%! contourf(xx, zz, tauxz_a, scale_tauxz);
%! daspect([1,1,1]);
%! colormap jet;
%! colorbar;
%! xlabel("x [m]");
%! ylabel("z [m]");
%! title("stress component tauxz [Pa]");
%! grid on;
%! grid minor on;
%! subplot(2, 1, 2);
%! contourf(xx, zz, tauxz, scale_tauxz);
%! daspect([1,1,1]);
%! colormap jet;
%! colorbar;
%! xlabel("x [m]");
%! ylabel("z [m]");
%! title("stress component tauxz [Pa]");
%! grid on;
%! grid minor on;

%! if (do_post_pro)
%!   opts.scale_def = 0.3 * geometry.l / max(max(abs(sol_stat.def)));
%!   opts.print_and_exit = true;
%!   opts.print_to_file = "";
%!   opts.skin_only = true;
%!   opts.show_element = true;
%!   opts.print_to_file = "";
%!   unwind_protect
%!     opts.print_to_file = tempname();
%!     opts.rotation_angle = [pi/2, 0, 0];
%!     fem_post_sol_external(mesh, sol_stat, opts);
%!     [img, map, alpha] = imread([opts.print_to_file, "_001.jpg"]);
%!     figure("visible", "off");
%!     imshow(img, map);
%!     title("Gmsh - deformed mesh / continuous stress tensor");
%!   unwind_protect_cleanup
%!     if (numel(opts.print_to_file))
%!       unlink([opts.print_to_file, "_001.jpg"]);
%!     endif
%!   end_unwind_protect
%! endif
%! figure_list();
%! idx_x = find((xx(:) > 0.4 * geometry.l) & (xx(:) < 0.6 * geometry.l));
%! assert(tauxx(:)(idx_x), tauxx_a(:)(idx_x), 1e-2 * max(tauxx_a(:)(idx_x)));
%! assert(tauxz(:)(idx_x), tauxz_a(:)(idx_x), 6e-2 * max(abs(tauxz_a(:)(idx_x))));

%!demo
%! close all;
%! ## DEMO 2
%! E1 = 70000e6;
%! nu1 = 0.3;
%! rho1 = 2700;
%! E2 = 60000e6;
%! nu2 = 0.3;
%! rho2 = 5000;
%! F1 = 100;
%! h = 2.5e-3;
%! param.a = 50e-3;
%! param.b = 20e-3;
%! param.c = 10e-3;
%! param.o = 25e-3;
%! param.g = 0.5e-3;
%! filename = "";
%! unwind_protect
%!   filename = tempname();
%!   if (ispc())
%!     filename(filename == "\\") = "/";
%!   endif
%!   fd = -1;
%!   unwind_protect
%!     geo_file = [filename, ".geo"];
%!     fd = fopen(geo_file, "w");
%!     if (fd == -1)
%!       error("failed to open file %s", geo_file);
%!     endif
%!     fputs(fd, "SetFactory(\"OpenCASCADE\");\n");
%!     fputs(fd, "Point(1) = {0.0, 0.0, 0.0};\n");
%!     fputs(fd, "Point(2) = {  a, 0.0, 0.0};\n");
%!     fputs(fd, "Point(3) = {  a,   b, 0.0};\n");
%!     fputs(fd, "Point(4) = {0.0,   b, 0.0};\n");
%!     fputs(fd, "Point(5) = {    o, 0.0, c + g};\n");
%!     fputs(fd, "Point(6) = {o + a, 0.0, c + g};\n");
%!     fputs(fd, "Point(7) = {o + a,   b, c + g};\n");
%!     fputs(fd, "Point(8) = {    o,   b, c + g};\n");
%!     fputs(fd, "Line(1) = {1,2};\n");
%!     fputs(fd, "Line(2) = {2,3};\n");
%!     fputs(fd, "Line(3) = {3,4};\n");
%!     fputs(fd, "Line(4) = {4,1};\n");
%!     fputs(fd, "Line(5) = {5,6};\n");
%!     fputs(fd, "Line(6) = {6,7};\n");
%!     fputs(fd, "Line(7) = {7,8};\n");
%!     fputs(fd, "Line(8) = {8,5};\n");
%!     fputs(fd, "Line Loop(9) = {1,2,3,4};\n");
%!     fputs(fd, "Line Loop(10) = {5,6,7,8};\n");
%!     fputs(fd, "Plane Surface(11) = {9};\n");
%!     fputs(fd, "Plane Surface(12) = {10};\n");
%!     fputs(fd, "v1[] = Extrude {0,0.0,c} {\n");
%!     fputs(fd, "  Surface{11};\n");
%!     fputs(fd, "};\n");
%!     fputs(fd, "v2[] = Extrude {0,0.0,c} {\n");
%!     fputs(fd, "  Surface{12};\n");
%!     fputs(fd, "};\n");
%!     fputs(fd, "Physical Volume(\"v1\") = {v1[1]};\n");
%!     fputs(fd, "Physical Volume(\"v2\") = {v2[1]};\n");
%!     fputs(fd, "Physical Surface(\"s1\") = {v1[0]};\n");
%!     fputs(fd, "Physical Surface(\"s2\") = {12};\n");
%!     fputs(fd, "Physical Surface(\"clamp\") = {v1[5]};\n");
%!     fputs(fd, "Physical Surface(\"load\") = {v2[3]};\n");
%!   unwind_protect_cleanup
%!     fclose(fd);
%!   end_unwind_protect
%!   opt.mesh.element_size = h;
%!   opt.mesh.jacobian_range = [0.5, 1.5];
%!   mesh = fem_pre_mesh_unstruct_create(geo_file, param, opt);
%!   mesh.material_data(1).rho = rho1;
%!   mesh.material_data(1).C = fem_pre_mat_isotropic(E1, nu1);
%!   mesh.material_data(2).rho = rho2;
%!   mesh.material_data(2).C = fem_pre_mat_isotropic(E2, nu2);
%!   mesh.materials.tet10 = zeros(rows(mesh.elements.tet10), 1, "int32");
%!   mesh.materials.tet10(mesh.groups.tet10(1).elements) = 1;
%!   mesh.materials.tet10(mesh.groups.tet10(2).elements) = 2;
%!   mesh.nodes(end + 1, 1:3) = [param.o + param.a, 0.5 * param.b, 1.5 * param.c + param.g];
%!   mesh.elements.rbe3 = fem_pre_mesh_rbe3_from_surf(mesh, mesh.groups.tria6(4).id, rows(mesh.nodes), "tria6");
%!   load_case.locked_dof = false(size(mesh.nodes));
%!   load_case.locked_dof(mesh.groups.tria6(3).nodes, 1:3) = true;
%!   load_case.loaded_nodes = int32(rows(mesh.nodes));
%!   load_case.loads = [0, 0, F1, 0, 0, 0];
%!   elem.sfncon6.slave = mesh.groups.tria6(1).nodes(:);
%!   elem.sfncon6.master = mesh.elements.tria6(mesh.groups.tria6(2).elements, :);
%!   elem.sfncon6.maxdist = param.g * (1 + sqrt(eps));
%!   mesh.elements.joints = fem_pre_mesh_constr_surf_to_node(mesh.nodes, elem);
%!   dof_map = fem_ass_dof_map(mesh, load_case);
%!   [mat_ass.K, ...
%!    mat_ass.R] = fem_ass_matrix(mesh, ...
%!                                dof_map, ...
%!                                [FEM_MAT_STIFFNESS, ...
%!                                 FEM_VEC_LOAD_CONSISTENT], ...
%!                                load_case);
%!   sol_stat = fem_sol_static(mesh, dof_map, mat_ass);
%!   sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                    dof_map, ...
%!                                    [FEM_SCA_STRESS_VMIS], ...
%!                                    load_case, ...
%!                                    sol_stat);
%!   opt_post.scale_def = 300;
%!   opt_post.show_element = true;
%!   opt_post.print_to_file = [filename, "_post"];
%!   opt_post.print_and_exit = true;
%!   opt_post.rotation_angle = [-pi/2, 0, 0];
%!   fem_post_sol_external(mesh, sol_stat, opt_post);
%!   figure("visible", "off");
%!   [img, map, alpha] = imread([opt_post.print_to_file, "_001.jpg"]);
%!   imshow(img, alpha);
%!   title("deformed mesh/van Mises stress");
%!   figure_list();
%! unwind_protect_cleanup
%!   if (numel(filename))
%!     fn = dir([filename, "*"]);
%!     for i=1:numel(fn)
%!       unlink(fullfile(fn(i).folder, fn(i).name));
%!     endfor
%!   endif
%! end_unwind_protect

%!demo
%! ## DEMO3
%! close all;

%! function [x, y, z, R, Phi] = cooks_membrane_geo(r, s, t, geometry)
%!   x = r * geometry.b;
%!   y = r * geometry.c + (r * (geometry.a1 + geometry.c - geometry.a0) + geometry.a0 - r * geometry.c) * s;
%!   z = t * geometry.h;
%! endfunction

%! function [F, locked] = cooks_membrane_bound_cond(r, s, t, geo, load)
%!   if (r == 1)
%!     F = load.F;
%!   else
%!     F = [];
%!   endif

%!   if (r == 0)
%!     locked = true(3, 1);
%!   else
%!     locked = [false; false; true];
%!   endif
%! endfunction

%! geometry.user_data.a0 = 44e-3;
%! geometry.user_data.a1 = 16e-3;
%! geometry.user_data.b = 44e-3;
%! geometry.user_data.c = 44e-3;
%! geometry.user_data.h = 1e-3;

%! material.E = 208.5044e6;
%! material.nu = 0.3;
%! material.rho = 1000;

%! geometry.sewing.tolerance = 0;
%! geometry.spatial_coordinates = @(r, s, t) feval("cooks_membrane_geo", r, s, t, geometry.user_data);
%! geometry.material_selector = @(r, s, t) 1;
%! geometry.boundary_condition = @(r, s, t, geo, load) feval("cooks_membrane_bound_cond", r, s, t, geo, load);

%! N = 2:22;

%! wA = zeros(3, length(N));

%! for i=1:length(N)
%!   geometry.mesh_size.r = linspace(0, 1, N(i));
%!   geometry.mesh_size.s = linspace(0, 1, N(i));
%!   geometry.mesh_size.t = [0, 1];

%!   loads.F = [0; 250; 0] / (length(geometry.mesh_size.s) * length(geometry.mesh_size.t));

%!   [mesh, load_case] = fem_pre_mesh_struct_create(geometry, loads, material);
%!   [dof_map] = fem_ass_dof_map(mesh, load_case);
%!   [mat_ass.K, ...
%!    mat_ass.R] = fem_ass_matrix(mesh, ...
%!                                dof_map, ...
%!                                [FEM_MAT_STIFFNESS, ...
%!                                 FEM_VEC_LOAD_CONSISTENT], ...
%!                                load_case);
%!   [sol_stat] = fem_sol_static(mesh, dof_map, mat_ass);

%!   wA(:, i) = mean(sol_stat.def(mesh.structured.inode_idx(end, end, :), 1:3).', 2);
%! endfor

%! ## reference solution:
%! wA_ref =[-19.038e-3;
%!          24.098e-3;
%!          0];

%! for i=1:2
%!   figure("visible", "off");
%!   hold on;

%!   plot(N, 1e3 * wA(i, :), "-;wA;1");
%!   plot(N([1,end]), 1e3 * wA_ref(i)([1,end]), "-;wA_r_e_f;0");
%!   xlabel("N [1]");
%!   ylabel("wA [mm]");
%!   grid on;
%!   grid minor on;
%!   title(sprintf("w%s", {"x","y"}{i}));
%! endfor

%! figure("visible", "off");
%! fem_post_sol_plot(mesh, sol_stat, 0.3);
%! xlabel("x [m]");
%! ylabel("y [m]");
%! zlabel("z [m]");
%! grid on;
%! grid minor on;
%! title("Cook's membrane deformed mesh");

%! figure_list();

%!demo
%! close all;
%! ## DEMO 4
%! E1 = 70000e6;
%! nu1 = 0.3;
%! rho1 = 2700;
%! E2 = 60000e6;
%! nu2 = 0.3;
%! rho2 = 5000;
%! F1 = 100;
%! param.h = 5e-3;
%! param.a = 50e-3;
%! param.b = 20e-3;
%! param.c = 10e-3;
%! param.o = 25e-3;
%! param.g = 0.5e-3;
%! filename = "";
%! unwind_protect
%!   filename = tempname();
%!   if (ispc())
%!     filename(filename == "\\") = "/";
%!   endif
%!   fd = -1;
%!   unwind_protect
%!     geo_file = [filename, ".geo"];
%!     fd = fopen(geo_file, "w");
%!     if (fd == -1)
%!       error("failed to open file %s", geo_file);
%!     endif
%!     fputs(fd, "SetFactory(\"OpenCASCADE\");\n");
%!     fputs(fd, "Mesh.SecondOrderIncomplete=1;\n");
%!     fputs(fd, "Point(1) = {0.0, 0.0, 0.0};\n");
%!     fputs(fd, "Point(2) = {  a, 0.0, 0.0};\n");
%!     fputs(fd, "Point(3) = {  a,   b, 0.0};\n");
%!     fputs(fd, "Point(4) = {0.0,   b, 0.0};\n");
%!     fputs(fd, "Point(5) = {    o, 0.0, c + g};\n");
%!     fputs(fd, "Point(6) = {o + a, 0.0, c + g};\n");
%!     fputs(fd, "Point(7) = {o + a,   b, c + g};\n");
%!     fputs(fd, "Point(8) = {    o,   b, c + g};\n");
%!     fputs(fd, "Line(1) = {1,2};\n");
%!     fputs(fd, "Line(2) = {2,3};\n");
%!     fputs(fd, "Line(3) = {3,4};\n");
%!     fputs(fd, "Line(4) = {4,1};\n");
%!     fputs(fd, "Line(5) = {5,6};\n");
%!     fputs(fd, "Line(6) = {6,7};\n");
%!     fputs(fd, "Line(7) = {7,8};\n");
%!     fputs(fd, "Line(8) = {8,5};\n");
%!     fputs(fd, "Line Loop(9) = {1,2,3,4};\n");
%!     fputs(fd, "Line Loop(10) = {5,6,7,8};\n");
%!     fputs(fd, "Plane Surface(11) = {9};\n");
%!     fputs(fd, "Plane Surface(12) = {10};\n");
%!     fputs(fd, "v1[] = Extrude {0,0.0,c} {\n");
%!     fputs(fd, "  Surface{11}; Layers{Ceil(c/h)}; Recombine;\n");
%!     fputs(fd, "};\n");
%!     fputs(fd, "Recombine Surface{11, v1[0]};\n");
%!     fputs(fd, "v2[] = Extrude {0,0.0,c} {\n");
%!     fputs(fd, "  Surface{12}; Layers{Ceil(c/h)}; Recombine;\n");
%!     fputs(fd, "};\n");
%!     fputs(fd, "Recombine Surface{12, v2[0]};\n");
%!     fputs(fd, "Physical Volume(\"v1\") = {v1[1]};\n");
%!     fputs(fd, "Physical Volume(\"v2\") = {v2[1]};\n");
%!     fputs(fd, "Physical Surface(\"s1\") = {v1[0]};\n");
%!     fputs(fd, "Physical Surface(\"s2\") = {12};\n");
%!     fputs(fd, "Physical Surface(\"clamp\") = {v1[5]};\n");
%!     fputs(fd, "Physical Surface(\"load\") = {v2[3]};\n");
%!   unwind_protect_cleanup
%!     fclose(fd);
%!   end_unwind_protect
%!   opt.mesh.element_size = param.h;
%!   opt.mesh.jacobian_range = [0.5, 1.5];
%!   mesh = fem_pre_mesh_unstruct_create(geo_file, param, opt);
%!   mesh.material_data(1).rho = rho1;
%!   mesh.material_data(1).C = fem_pre_mat_isotropic(E1, nu1);
%!   mesh.material_data(2).rho = rho2;
%!   mesh.material_data(2).C = fem_pre_mat_isotropic(E2, nu2);
%!   mesh.materials.iso20 = zeros(rows(mesh.elements.iso20), 1, "int32");
%!   mesh.materials.iso20(mesh.groups.iso20(1).elements) = 1;
%!   mesh.materials.iso20(mesh.groups.iso20(2).elements) = 2;
%!   mesh.nodes(end + 1, 1:3) = [param.o + param.a, 0.5 * param.b, 1.5 * param.c + param.g];
%!   mesh.elements.rbe3 = fem_pre_mesh_rbe3_from_surf(mesh, mesh.groups.quad8(4).id, rows(mesh.nodes), "quad8");
%!   load_case.locked_dof = false(size(mesh.nodes));
%!   load_case.locked_dof(mesh.groups.quad8(3).nodes, 1:3) = true;
%!   load_case.loaded_nodes = int32(rows(mesh.nodes));
%!   load_case.loads = [0, 0, F1, 0, 0, 0];
%!   elem.sfncon8.slave = mesh.groups.quad8(1).nodes(:);
%!   elem.sfncon8.master = mesh.elements.quad8(mesh.groups.quad8(2).elements, :);
%!   elem.sfncon8.maxdist = param.g * (1 + sqrt(eps));
%!   mesh.elements.joints = fem_pre_mesh_constr_surf_to_node(mesh.nodes, elem);
%!   dof_map = fem_ass_dof_map(mesh, load_case);
%!   [mat_ass.K, ...
%!    mat_ass.R] = fem_ass_matrix(mesh, ...
%!                                dof_map, ...
%!                                [FEM_MAT_STIFFNESS, ...
%!                                 FEM_VEC_LOAD_CONSISTENT], ...
%!                                load_case);
%!   sol_stat = fem_sol_static(mesh, dof_map, mat_ass);
%!   sol_stat.stress = fem_ass_matrix(mesh, ...
%!                                    dof_map, ...
%!                                    [FEM_SCA_STRESS_VMIS], ...
%!                                    load_case, ...
%!                                    sol_stat);
%!   opt_post.scale_def = 300;
%!   opt_post.show_element = true;
%!   opt_post.print_to_file = [filename, "_post"];
%!   opt_post.print_and_exit = true;
%!   opt_post.rotation_angle = [-pi/2, 0, 0];
%!   fem_post_sol_external(mesh, sol_stat, opt_post);
%!   figure("visible", "off");
%!   [img, map, alpha] = imread([opt_post.print_to_file, "_001.jpg"]);
%!   imshow(img, alpha);
%!   title("deformed mesh/van Mises stress");
%!   figure_list();
%! unwind_protect_cleanup
%!   if (numel(filename))
%!     fn = dir([filename, "*"]);
%!     for i=1:numel(fn)
%!       unlink(fullfile(fn(i).folder, fn(i).name));
%!     endfor
%!   endif
%! end_unwind_protect
