# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      MBD_NUM_TASKS: 2
      MBD_FLAGS: -Ofast -Wall -march=native -mtune=native

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Enable source code
        run: |
          sudo sed 's/Types: deb/Types: deb deb-src/g' -i /etc/apt/sources.list.d/ubuntu.sources

      # Runs a single command using the runners shell
      - name: Install packages
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq build-dep octave
          sudo apt-get -yq install mercurial git libopenmpi-dev libnlopt-dev libhdf5-dev libginac-dev libatomic-ops-dev libnetcdf-c++4-dev libmetis-dev cmake

      # Runs a single command using the runners shell
      - name: Install Gmsh
        run: |
           sudo apt-get install libglu1-mesa
           GMSH_URL="http://www.gmsh.info/bin/Linux/"
           GMSH_VERSION="stable"
           GMSH_TAR="gmsh-${GMSH_VERSION}-Linux64.tgz"
           wget "${GMSH_URL}${GMSH_TAR}"
           tar -zxvf "${GMSH_TAR}"
           sudo install gmsh-*.*.*-Linux64/bin/gmsh /usr/local/bin
           gmsh --version

      - name: Install GNU-Octave
        run: |
          OCTAVE_REPO="https://www.octave.org/hg/octave"
          OCTAVE_BRANCH="stable"
          hg clone -b ${OCTAVE_BRANCH} ${OCTAVE_REPO} "${RUNNER_TEMP}/octave"
          pushd "${RUNNER_TEMP}/octave"
          hg checkout ${OCTAVE_BRANCH}
          ./bootstrap
          ./configure CXXFLAGS="-O3 -Wall -march=native" --with-hdf5-includedir=`pkg-config --cflags-only-I hdf5-serial | sed 's/^-I//'` --with-hdf5-libdir=`pkg-config --libs-only-L hdf5-serial | sed 's/^-L//'`
          make -j${MBD_NUM_TASKS}
          make check
          sudo make install

      - name: Install MKL
        run: |
          sudo apt-get -yq install libmkl-full-dev

      - name: Install Trilinos
        run: |
          TRILINOS_REPO="https://github.com/trilinos/Trilinos.git"
          TRILINOS_BRANCH="trilinos-release-14-4-0"
          TRILINOS_CONFIG="-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DTrilinos_ENABLE_NOX=ON -DTrilinos_ENABLE_Epetra=ON -DTrilinos_ENABLE_EpetraExt=ON -DTrilinos_ENABLE_Amesos=ON -DTrilinos_ENABLE_AztecOO=ON -DEpetra_ENABLE_MPI=OFF -DNOX_ENABLE_Epetra=ON -DNOX_ENABLE_EpetraExt=ON -DNOX_ENABLE_ABSTRACT_IMPLEMENTATION_EPETRA=ON -DNOX_ENABLE_AztecOO=ON -DNOX_ENABLE_Ifpack=ON -DTrilinos_ENABLE_TESTS=OFF"
          TRILINOS_PREFIX="/usr/local/"
          git clone -b ${TRILINOS_BRANCH} ${TRILINOS_REPO} "${RUNNER_TEMP}/trilinos"
          pushd "${RUNNER_TEMP}/trilinos"
          mkdir build_dir
          pushd build_dir
          cmake .. -DCMAKE_INSTALL_PREFIX="${TRILINOS_PREFIX}" ${TRILINOS_CONFIG}
          make -j${MBD_NUM_TASKS}
          sudo make install

      - name: Install gtest
        run: |
          GTEST_REPO="https://github.com/google/googletest.git"
          GTEST_BRANCH="main"
          git clone -b ${GTEST_BRANCH} ${GTEST_REPO} "${RUNNER_TEMP}/googletest"
          pushd "${RUNNER_TEMP}/googletest"
          mkdir build_dir
          pushd build_dir
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          make -j${MBD_NUM_TASKS}
          sudo make install

      - name: Install MBDyn
        run: |
          MBD_CPPFLAGS="-I/usr/local/include/trilinos -I/usr/include/suitesparse -I/usr/include/mkl"
          MBD_ARGS_WITH="--with-static-modules --with-arpack --with-umfpack --with-klu --with-arpack --with-lapack --without-metis --without-mpi --with-trilinos --with-pardiso --with-suitesparseqr --with-qrupdate --with-gtest"
          MBD_ARGS_ENABLE="--enable-octave --enable-multithread --disable-Werror --enable-install_test_progs"
          MBD_REPO="https://public.gitlab.polimi.it/DAER/mbdyn.git"
          LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib"
          git clone -b develop ${MBD_REPO} "${RUNNER_TEMP}/mbdyn"
          pushd "${RUNNER_TEMP}/mbdyn"
          ./bootstrap.sh
          ./configure CPPFLAGS="${MBD_CPPFLAGS}" LDFLAGS="${LDFLAGS} ${MBD_FLAGS}" CXXFLAGS="${MBD_FLAGS} ${MBD_CXXFLAGS}" CFLAGS="${MBD_FLAGS}" FCFLAGS="${MBD_FLAGS}" F77FLAGS="${MBD_FLAGS}" ${MBD_ARGS_WITH} ${MBD_ARGS_ENABLE}
          make -j${MBD_NUM_TASKS}
          make test
          sudo make install

      - name: Install octave-forge packages
        run: |
          octave -q --eval 'pkg install -verbose -forge nurbs;pkg install -verbose -forge netcdf'

      - name: Install mboct-octave-pkg
        run: |
          MBOCT_OCTAVE_PKG_REPO="https://github.com/octave-user/mboct-octave-pkg.git"
          MBOCT_OCTAVE_PKG_BRANCH="master"
          git clone -b "${MBOCT_OCTAVE_PKG_BRANCH}" "${MBOCT_OCTAVE_PKG_REPO}" "${RUNNER_TEMP}/mboct-octave-pkg"
          make -C "${RUNNER_TEMP}/mboct-octave-pkg" CXXFLAGS="${MBD_FLAGS}" -j${MBD_NUM_TASKS} install_local
          make -C "${RUNNER_TEMP}/mboct-octave-pkg" check_installed

      - name: Install mboct-numerical-pkg
        run: |
          MBOCT_NUMERICAL_PKG_REPO="https://github.com/octave-user/mboct-numerical-pkg.git"
          MBOCT_NUMERICAL_PKG_BRANCH="master"
          git clone -b "${MBOCT_NUMERICAL_PKG_BRANCH}" "${MBOCT_NUMERICAL_PKG_REPO}" "${RUNNER_TEMP}/mboct-numerical-pkg"
          make -C "${RUNNER_TEMP}/mboct-numerical-pkg" CXXFLAGS="${MBD_FLAGS}" -j${MBD_NUM_TASKS} install_local
          make -C "${RUNNER_TEMP}/mboct-numerical-pkg" check_installed

      - name: Install mboct-mbdyn-pkg
        run: |
          MBOCT_MBDYN_PKG_REPO="https://github.com/octave-user/mboct-mbdyn-pkg.git"
          MBOCT_MBDYN_PKG_BRANCH="master"
          git clone -b "${MBOCT_MBDYN_PKG_BRANCH}" "${MBOCT_MBDYN_PKG_REPO}" "${RUNNER_TEMP}/mboct-mbdyn-pkg"
          make -C "${RUNNER_TEMP}/mboct-mbdyn-pkg" CXXFLAGS="${MBD_FLAGS}" -j${MBD_NUM_TASKS} install_local

      - name: Install mboct-fem-pkg
        run: |
          make -C ${GITHUB_WORKSPACE} CXXFLAGS="${MBD_FLAGS}" -j${MBD_NUM_TASKS} install_local
          pushd ${GITHUB_WORKSPACE}/src
          ./bootstrap
          ./configure CXXFLAGS="${MBD_FLAGS}"
          make -j${MBD_NUM_TASKS}
          sudo make install

      - name: Check mboct-fem-pkg
        run: |
          make NUM_TASKS=${MBD_NUM_TASKS} -C ${GITHUB_WORKSPACE} check_installed_parallel
