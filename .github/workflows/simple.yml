# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install Gmsh
        run: |
           sudo apt-get install libglu1-mesa
           GMSH_URL="http://www.gmsh.info/bin/Linux/"
           GMSH_VERSION="stable"
           GMSH_TAR="gmsh-${GMSH_VERSION}-Linux64.tgz"
           wget "${GMSH_URL}${GMSH_TAR}"
           tar -zxvf "${GMSH_TAR}"
           sudo install gmsh-*.*.*-Linux64/bin/gmsh /usr/local/bin
           gmsh --version

      # Runs a single command using the runners shell
      - name: Install build dependencies for GNU/Octave
        run: |
           sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
           sudo apt-get update
           sudo apt-get build-dep octave
           sudo apt-get install mercurial \
           libsuitesparse-dev libarpack2-dev libmumps-seq-dev \
           libmetis-dev libnlopt-dev \
           trilinos-all-dev libopenmpi-dev libptscotch-dev libsuitesparse-dev libqrupdate-dev

      # Runs a single command using the runners shell
      - name: Clone GNU/Octave
        run: |
           hg clone https://www.octave.org/hg/octave octave
           pushd octave
           hg checkout stable
           popd

      # Runs a single command using the runners shell
      - name: Compile GNU/Octave
        run: |
           pushd octave
           chmod +x ./bootstrap
           ./bootstrap
           ./configure --disable-java
           make -j4
           popd

      # Runs a single command using the runners shell
      - name: Check GNU/Octave
        run: |
           pushd octave
           make check 2>&1 | tee fntests.out
           awk -F ' ' 'BEGIN{ failed=9999; } /^  FAIL\>/{ failed = $2; } END { if (failed != 0) exit 1; }' fntests.out
           popd

      # Runs a single command using the runners shell
      - name: Install GNU/Octave
        run: |
           pushd octave
           sudo make install
           popd

      # Runs a single command using the runners shell
      - name: Install nurbs
        run: |
           sudo octave --eval "pkg install -verbose -forge nurbs"

      # Runs a single command using the runners shell
      - name: Install MKL
        run: |
           sudo apt-get install libmkl-full-dev ## Should be installed after GNU/Octave in order to avoid race conditions

      # Runs a set of commands using the runners shell
      - name: Clone MBDyn
        run: |
          git clone -b mfront-csl-finite-strain https://public.gitlab.polimi.it/DAER/mbdyn.git
          cd mbdyn
          git config user.name octave-user
          git config user.email octave-user@a1.net
          git merge origin/solid-unilateral-contact-mcp_a

      # Runs a set of commands using the runners shell
      - name: Compile MBDyn
        run: |
          pushd mbdyn
          chmod +x ./bootstrap.sh
          ./bootstrap.sh
          ./configure --with-static-modules \
          --enable-octave \
          --disable-Werror CXXFLAGS="-Ofast -Wall -march=native -mtune=native" \
          CPPFLAGS="-I/usr/include/mkl -I/usr/lib/x86_64-linux-gnu/openmpi/include -I/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi/ompi/mpi/cxx -I/usr/include/trilinos -I/usr/include/suitesparse" \
          LDFLAGS="-L/usr/lib/x86_64-linux-gnu/hdf5/openmpi" \
          --with-arpack --with-umfpack --with-klu --with-arpack --with-lapack --without-metis --with-mpi --with-trilinos --with-pardiso --with-suitesparseqr --with-qrupdate
          make -j4
          popd

      # Runs a set of commands using the runners shell
      - name: Check MBDyn
        run: |
          pushd mbdyn
          for cmd in "libraries/libmbmath/sp_gradient_test" \
                     "libraries/libmbmath/dgeequtest" \
                     "libraries/libmbmath/itertest" \
                     "libraries/libmbmath/matmultest" \
                     "libraries/libmbmath/subtest" \
                     "libraries/libmbwrap/arptest" \
                     "libraries/libmbwrap/cctest -m umfpack" \
                     "libraries/libmbwrap/cctest -m y12" \
                     "libraries/libmbwrap/wraptest -m umfpack" \
                     "libraries/libmbwrap/wraptest -m pardiso" \
                     "libraries/libmbwrap/wraptest -m pardiso_64" \
                     "libraries/libmbwrap/wraptest -m naive" \
                     "libraries/libmbwrap/wraptest -m lapack" \
                     "libraries/libmbwrap/wraptest -m qr" \
                     "libraries/libmbwrap/wraptest -m spqr" \
                     "libraries/liby12/y12test" \
                     "mbdyn/struct/solidshapetest" ; do
               printf "running command: \"%s\"\n" "${cmd}"
               ${cmd}
               rc=$?
               printf "status: %d\n" ${rc}
          done
          popd

      # Runs a set of commands using the runners shell
      - name: Install MBDyn
        run: |
          pushd mbdyn
          sudo make install
          popd

      - name: Install mboct-octave-pkg
        run: |
           git clone -b master https://github.com/octave-user/mboct-octave-pkg.git && \
           pushd mboct-octave-pkg && \
           make CXXFLAGS="-Ofast -Wall -march=native" install_local && popd

      - name: Install mboct-numerical-pkg
        run: |
           git clone -b master https://github.com/octave-user/mboct-numerical-pkg.git && \
           pushd mboct-numerical-pkg && \
           make CXXFLAGS="-Ofast -Wall -march=native" install_local && popd

      - name: Install mboct-mbdyn-pkg
        run: |
           git clone -b mfront-finite-strain https://github.com/octave-user/mboct-mbdyn-pkg.git && \
           pushd mboct-mbdyn-pkg && \
           make CXXFLAGS="-Ofast -Wall -march=native" install_local && popd

      - name: Create distribution
        run: make -C $GITHUB_WORKSPACE dist

      - name: Install the package
        run: make -C $GITHUB_WORKSPACE CXXFLAGS="-Ofast -Wall -march=native" install_local

      - name: Install fem_pre_mesh_size
        run: |
             pushd $GITHUB_WORKSPACE/src
             chmod +x ./bootstrap
             ./bootstrap && ./configure && make && sudo make install
             popd

      - name: Run all tests
        run: |
             export MBD_NUM_THREADS=2
             make -C $GITHUB_WORKSPACE check_installed 2>&1 | tee fntests.out
             cat ${GITHUB_WORKSPACE}/fntests.log
             tail -n 14 fntests.out
             awk -F ' ' 'BEGIN{ failed=9999; } /^  FAIL\>/{ failed = $2; } END { if (failed != 0) exit 1; }' fntests.out
