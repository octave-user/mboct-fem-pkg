# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install GNU/Octave
        run: |
           sudo apt-get update
           sudo apt-get dist-upgrade
           sudo apt-get install octave liboctave-dev \
           libsuitesparse-dev libarpack2-dev libmumps-seq-dev \
           libmetis-dev octave-nurbs libnlopt-dev \
           libmkl-full-dev coreutils

      # Runs a single command using the runners shell
      - name: Install Gmsh
        run: |
           wget http://www.gmsh.info/bin/Linux/gmsh-stable-Linux64.tgz
           tar -zxvf gmsh-stable-Linux64.tgz
           sudo install gmsh-*.*.*-Linux64/bin/gmsh /usr/local/bin
           gmsh --version

      # Runs a set of commands using the runners shell
      - name: Install MBDyn
        run: |
          wget https://public.gitlab.polimi.it/DAER/mbdyn/-/archive/develop/mbdyn-develop.tar.bz2 && \
          tar -jxvf mbdyn-develop.tar.bz2 && \
          pushd mbdyn-develop && \
          ./bootstrap.sh && \
          ./configure --with-static-modules \
          --enable-octave --enable-sparse_autodiff --enable-autodiff \
          --disable-Werror CXXFLAGS="-Ofast -Wall -march=native" CPPFLAGS=-I/usr/include/suitesparse \
          --with-arpack --with-umfpack --without-metis && \
          make -j4 && sudo make install && popd

      - name: Install mboct-octave-pkg
        run: |
           git clone -b master https://github.com/octave-user/mboct-octave-pkg.git && \
           pushd mboct-octave-pkg && \
           make CXXFLAGS="-Ofast -Wall -march=native" install_local && popd

      - name: Install mboct-numerical-pkg
        run: |
           git clone -b master https://github.com/octave-user/mboct-numerical-pkg.git && \
           pushd mboct-numerical-pkg && \
           make CXXFLAGS="-Ofast -Wall -march=native" install_local && popd

      - name: Install mboct-mbdyn-pkg
        run: |
           git clone -b master https://github.com/octave-user/mboct-mbdyn-pkg.git && \
           pushd mboct-mbdyn-pkg && \
           make CXXFLAGS="-Ofast -Wall -march=native" install_local && popd

      - name: Create distribution
        run: make -C $GITHUB_WORKSPACE dist

      - name: Install the package
        run: make -C $GITHUB_WORKSPACE CXXFLAGS="-Ofast -Wall -march=native" install_local

      - name: Run all tests
        run: |
             make -C $GITHUB_WORKSPACE check_installed 2>&1 | tee fntests.out
             cat ${GITHUB_WORKSPACE}/fntests.log
             tail -n 14 fntests.out
             awk -F ' ' 'BEGIN{ failed=9999; } /^  FAIL\>/{ failed = $2; } END { if (failed != 0) exit 1; }' fntests.out
